/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.bmod.ide.contentassist.antlr.internal.InternalBmodParser;
import org.xtext.bmod.services.BmodGrammarAccess;

public class BmodParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BmodGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BmodGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFloorplanAccess().getAlternatives_1(), "rule__Floorplan__Alternatives_1");
			builder.put(grammarAccess.getPerceptionAccess().getAlternatives(), "rule__Perception__Alternatives");
			builder.put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
			builder.put(grammarAccess.getPerceptionEnumAccess().getAlternatives(), "rule__PerceptionEnum__Alternatives");
			builder.put(grammarAccess.getActionEnumAccess().getAlternatives(), "rule__ActionEnum__Alternatives");
			builder.put(grammarAccess.getFloorplanAccess().getGroup(), "rule__Floorplan__Group__0");
			builder.put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
			builder.put(grammarAccess.getRoomAccess().getGroup_3(), "rule__Room__Group_3__0");
			builder.put(grammarAccess.getDoorAccess().getGroup(), "rule__Door__Group__0");
			builder.put(grammarAccess.getPerceptionLevelAccess().getGroup(), "rule__PerceptionLevel__Group__0");
			builder.put(grammarAccess.getActionProfileAccess().getGroup(), "rule__ActionProfile__Group__0");
			builder.put(grammarAccess.getPersonAccess().getGroup(), "rule__Person__Group__0");
			builder.put(grammarAccess.getExitAccess().getGroup(), "rule__Exit__Group__0");
			builder.put(grammarAccess.getFireAccess().getGroup(), "rule__Fire__Group__0");
			builder.put(grammarAccess.getEmergencySignAccess().getGroup(), "rule__EmergencySign__Group__0");
			builder.put(grammarAccess.getDoorRefAccess().getGroup(), "rule__DoorRef__Group__0");
			builder.put(grammarAccess.getDangerousConditionAccess().getGroup(), "rule__DangerousCondition__Group__0");
			builder.put(grammarAccess.getCoordinateAccess().getGroup(), "rule__Coordinate__Group__0");
			builder.put(grammarAccess.getAreaAccess().getGroup(), "rule__Area__Group__0");
			builder.put(grammarAccess.getAreaAccess().getGroup_4(), "rule__Area__Group_4__0");
			builder.put(grammarAccess.getAreaAccess().getGroup_4_2(), "rule__Area__Group_4_2__0");
			builder.put(grammarAccess.getFloorplanAccess().getPerceptionsAssignment_1_0(), "rule__Floorplan__PerceptionsAssignment_1_0");
			builder.put(grammarAccess.getFloorplanAccess().getActionsAssignment_1_1(), "rule__Floorplan__ActionsAssignment_1_1");
			builder.put(grammarAccess.getFloorplanAccess().getRoomsAssignment_1_2(), "rule__Floorplan__RoomsAssignment_1_2");
			builder.put(grammarAccess.getFloorplanAccess().getDoorsAssignment_1_3(), "rule__Floorplan__DoorsAssignment_1_3");
			builder.put(grammarAccess.getFloorplanAccess().getPersonsAssignment_1_4(), "rule__Floorplan__PersonsAssignment_1_4");
			builder.put(grammarAccess.getFloorplanAccess().getExitsAssignment_1_5(), "rule__Floorplan__ExitsAssignment_1_5");
			builder.put(grammarAccess.getFloorplanAccess().getFiresAssignment_1_6(), "rule__Floorplan__FiresAssignment_1_6");
			builder.put(grammarAccess.getFloorplanAccess().getSignsAssignment_1_7(), "rule__Floorplan__SignsAssignment_1_7");
			builder.put(grammarAccess.getFloorplanAccess().getDanconsAssignment_1_8(), "rule__Floorplan__DanconsAssignment_1_8");
			builder.put(grammarAccess.getRoomAccess().getNameAssignment_1(), "rule__Room__NameAssignment_1");
			builder.put(grammarAccess.getRoomAccess().getAreasAssignment_2(), "rule__Room__AreasAssignment_2");
			builder.put(grammarAccess.getRoomAccess().getAreasAssignment_3_1(), "rule__Room__AreasAssignment_3_1");
			builder.put(grammarAccess.getDoorAccess().getNameAssignment_1(), "rule__Door__NameAssignment_1");
			builder.put(grammarAccess.getDoorAccess().getFromAssignment_3(), "rule__Door__FromAssignment_3");
			builder.put(grammarAccess.getDoorAccess().getToAssignment_5(), "rule__Door__ToAssignment_5");
			builder.put(grammarAccess.getPerceptionAccess().getExistingAssignment_0(), "rule__Perception__ExistingAssignment_0");
			builder.put(grammarAccess.getPerceptionAccess().getCustomAssignment_1(), "rule__Perception__CustomAssignment_1");
			builder.put(grammarAccess.getActionAccess().getExistingAssignment_0(), "rule__Action__ExistingAssignment_0");
			builder.put(grammarAccess.getActionAccess().getCustomAssignment_1(), "rule__Action__CustomAssignment_1");
			builder.put(grammarAccess.getPerceptionLevelAccess().getNameAssignment_1(), "rule__PerceptionLevel__NameAssignment_1");
			builder.put(grammarAccess.getActionProfileAccess().getNameAssignment_1(), "rule__ActionProfile__NameAssignment_1");
			builder.put(grammarAccess.getPersonAccess().getNameAssignment_1(), "rule__Person__NameAssignment_1");
			builder.put(grammarAccess.getPersonAccess().getLocationAssignment_3(), "rule__Person__LocationAssignment_3");
			builder.put(grammarAccess.getPersonAccess().getPerceptionAssignment_5(), "rule__Person__PerceptionAssignment_5");
			builder.put(grammarAccess.getPersonAccess().getActionAssignment_7(), "rule__Person__ActionAssignment_7");
			builder.put(grammarAccess.getExitAccess().getLocationAssignment_2(), "rule__Exit__LocationAssignment_2");
			builder.put(grammarAccess.getFireAccess().getLocationAssignment_2(), "rule__Fire__LocationAssignment_2");
			builder.put(grammarAccess.getEmergencySignAccess().getOnAssignment_2(), "rule__EmergencySign__OnAssignment_2");
			builder.put(grammarAccess.getEmergencySignAccess().getToAssignment_3(), "rule__EmergencySign__ToAssignment_3");
			builder.put(grammarAccess.getDoorRefAccess().getRefAssignment_1(), "rule__DoorRef__RefAssignment_1");
			builder.put(grammarAccess.getDangerousConditionAccess().getOnAssignment_2(), "rule__DangerousCondition__OnAssignment_2");
			builder.put(grammarAccess.getDangerousConditionAccess().getAmountAssignment_3(), "rule__DangerousCondition__AmountAssignment_3");
			builder.put(grammarAccess.getCoordinateAccess().getXAssignment_1(), "rule__Coordinate__XAssignment_1");
			builder.put(grammarAccess.getCoordinateAccess().getYAssignment_3(), "rule__Coordinate__YAssignment_3");
			builder.put(grammarAccess.getAreaAccess().getFromAssignment_1(), "rule__Area__FromAssignment_1");
			builder.put(grammarAccess.getAreaAccess().getToAssignment_3(), "rule__Area__ToAssignment_3");
			builder.put(grammarAccess.getAreaAccess().getWithoutAssignment_4_1(), "rule__Area__WithoutAssignment_4_1");
			builder.put(grammarAccess.getAreaAccess().getWithoutAssignment_4_2_1(), "rule__Area__WithoutAssignment_4_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BmodGrammarAccess grammarAccess;

	@Override
	protected InternalBmodParser createParser() {
		InternalBmodParser result = new InternalBmodParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BmodGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BmodGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
