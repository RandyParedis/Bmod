/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.bmod.ide.contentassist.antlr.internal.InternalBReactParser;
import org.xtext.bmod.services.BReactGrammarAccess;

public class BReactParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BReactGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BReactGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFindAccess().getAlternatives_4(), "rule__Find__Alternatives_4");
			builder.put(grammarAccess.getDistanceAccess().getAlternatives(), "rule__Distance__Alternatives");
			builder.put(grammarAccess.getLocatableAccess().getAlternatives(), "rule__Locatable__Alternatives");
			builder.put(grammarAccess.getReactAccess().getGroup(), "rule__React__Group__0");
			builder.put(grammarAccess.getActionDescAccess().getGroup(), "rule__ActionDesc__Group__0");
			builder.put(grammarAccess.getFindAccess().getGroup(), "rule__Find__Group__0");
			builder.put(grammarAccess.getReactAccess().getActionsAssignment_1(), "rule__React__ActionsAssignment_1");
			builder.put(grammarAccess.getActionDescAccess().getSharedAssignment_0(), "rule__ActionDesc__SharedAssignment_0");
			builder.put(grammarAccess.getActionDescAccess().getNameAssignment_2(), "rule__ActionDesc__NameAssignment_2");
			builder.put(grammarAccess.getActionDescAccess().getFindsAssignment_4(), "rule__ActionDesc__FindsAssignment_4");
			builder.put(grammarAccess.getFindAccess().getGlobalAssignment_0(), "rule__Find__GlobalAssignment_0");
			builder.put(grammarAccess.getFindAccess().getDistanceAssignment_2(), "rule__Find__DistanceAssignment_2");
			builder.put(grammarAccess.getFindAccess().getFromAssignment_3(), "rule__Find__FromAssignment_3");
			builder.put(grammarAccess.getFindAccess().getBurningAssignment_4_0(), "rule__Find__BurningAssignment_4_0");
			builder.put(grammarAccess.getFindAccess().getNormalAssignment_4_1(), "rule__Find__NormalAssignment_4_1");
			builder.put(grammarAccess.getFindAccess().getLocatableAssignment_5(), "rule__Find__LocatableAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BReactGrammarAccess grammarAccess;

	@Override
	protected InternalBReactParser createParser() {
		InternalBReactParser result = new InternalBReactParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BReactGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BReactGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
