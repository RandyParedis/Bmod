/*
 * generated by Xtext 2.16.0
 */
parser grammar InternalBReactParser;

options {
	tokenVocab=InternalBReactLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.xtext.bmod.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.bmod.services.BReactGrammarAccess;

}
@members {
	private BReactGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("Cell", "'Cell'");
		tokenNameToValue.put("Door", "'Door'");
		tokenNameToValue.put("Exit", "'Exit'");
		tokenNameToValue.put("Fire", "'Fire'");
		tokenNameToValue.put("Find", "'find'");
		tokenNameToValue.put("From", "'from'");
		tokenNameToValue.put("Last", "'last'");
		tokenNameToValue.put("First", "'first'");
		tokenNameToValue.put("Person", "'Person'");
		tokenNameToValue.put("Action", "'action'");
		tokenNameToValue.put("Global", "'global'");
		tokenNameToValue.put("Normal", "'normal'");
		tokenNameToValue.put("Shared", "'shared'");
		tokenNameToValue.put("Burning", "'burning'");
		tokenNameToValue.put("Nearest", "'nearest'");
		tokenNameToValue.put("Farthest", "'farthest'");
	}

	public void setGrammarAccess(BReactGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleReact
entryRuleReact
:
{ before(grammarAccess.getReactRule()); }
	 ruleReact
{ after(grammarAccess.getReactRule()); } 
	 EOF 
;

// Rule React
ruleReact 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReactAccess().getGroup()); }
		(rule__React__Group__0)
		{ after(grammarAccess.getReactAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionDesc
entryRuleActionDesc
:
{ before(grammarAccess.getActionDescRule()); }
	 ruleActionDesc
{ after(grammarAccess.getActionDescRule()); } 
	 EOF 
;

// Rule ActionDesc
ruleActionDesc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionDescAccess().getGroup()); }
		(rule__ActionDesc__Group__0)
		{ after(grammarAccess.getActionDescAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFind
entryRuleFind
:
{ before(grammarAccess.getFindRule()); }
	 ruleFind
{ after(grammarAccess.getFindRule()); } 
	 EOF 
;

// Rule Find
ruleFind 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFindAccess().getGroup()); }
		(rule__Find__Group__0)
		{ after(grammarAccess.getFindAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Distance
ruleDistance
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceAccess().getAlternatives()); }
		(rule__Distance__Alternatives)
		{ after(grammarAccess.getDistanceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Locatable
ruleLocatable
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocatableAccess().getAlternatives()); }
		(rule__Locatable__Alternatives)
		{ after(grammarAccess.getLocatableAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFindAccess().getBurningAssignment_4_0()); }
		(rule__Find__BurningAssignment_4_0)
		{ after(grammarAccess.getFindAccess().getBurningAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getFindAccess().getNormalAssignment_4_1()); }
		(rule__Find__NormalAssignment_4_1)
		{ after(grammarAccess.getFindAccess().getNormalAssignment_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Distance__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistanceAccess().getNearestEnumLiteralDeclaration_0()); }
		(Nearest)
		{ after(grammarAccess.getDistanceAccess().getNearestEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDistanceAccess().getFarthestEnumLiteralDeclaration_1()); }
		(Farthest)
		{ after(grammarAccess.getDistanceAccess().getFarthestEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDistanceAccess().getFirstEnumLiteralDeclaration_2()); }
		(First)
		{ after(grammarAccess.getDistanceAccess().getFirstEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDistanceAccess().getLastEnumLiteralDeclaration_3()); }
		(Last)
		{ after(grammarAccess.getDistanceAccess().getLastEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Locatable__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocatableAccess().getCellEnumLiteralDeclaration_0()); }
		(Cell)
		{ after(grammarAccess.getLocatableAccess().getCellEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLocatableAccess().getDoorEnumLiteralDeclaration_1()); }
		(Door)
		{ after(grammarAccess.getLocatableAccess().getDoorEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getLocatableAccess().getExitEnumLiteralDeclaration_2()); }
		(Exit)
		{ after(grammarAccess.getLocatableAccess().getExitEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getLocatableAccess().getFireEnumLiteralDeclaration_3()); }
		(Fire)
		{ after(grammarAccess.getLocatableAccess().getFireEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getLocatableAccess().getPersonEnumLiteralDeclaration_4()); }
		(Person)
		{ after(grammarAccess.getLocatableAccess().getPersonEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__React__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__React__Group__0__Impl
	rule__React__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__React__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReactAccess().getReactAction_0()); }
	()
	{ after(grammarAccess.getReactAccess().getReactAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__React__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__React__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__React__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReactAccess().getActionsAssignment_1()); }
	(rule__React__ActionsAssignment_1)*
	{ after(grammarAccess.getReactAccess().getActionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionDesc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionDesc__Group__0__Impl
	rule__ActionDesc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionDescAccess().getSharedAssignment_0()); }
	(rule__ActionDesc__SharedAssignment_0)?
	{ after(grammarAccess.getActionDescAccess().getSharedAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionDesc__Group__1__Impl
	rule__ActionDesc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionDescAccess().getActionKeyword_1()); }
	Action
	{ after(grammarAccess.getActionDescAccess().getActionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionDesc__Group__2__Impl
	rule__ActionDesc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionDescAccess().getNameAssignment_2()); }
	(rule__ActionDesc__NameAssignment_2)
	{ after(grammarAccess.getActionDescAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionDesc__Group__3__Impl
	rule__ActionDesc__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionDescAccess().getColonKeyword_3()); }
	Colon
	{ after(grammarAccess.getActionDescAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionDesc__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getActionDescAccess().getFindsAssignment_4()); }
		(rule__ActionDesc__FindsAssignment_4)
		{ after(grammarAccess.getActionDescAccess().getFindsAssignment_4()); }
	)
	(
		{ before(grammarAccess.getActionDescAccess().getFindsAssignment_4()); }
		(rule__ActionDesc__FindsAssignment_4)*
		{ after(grammarAccess.getActionDescAccess().getFindsAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Find__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Find__Group__0__Impl
	rule__Find__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFindAccess().getGlobalAssignment_0()); }
	(rule__Find__GlobalAssignment_0)?
	{ after(grammarAccess.getFindAccess().getGlobalAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Find__Group__1__Impl
	rule__Find__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFindAccess().getFindKeyword_1()); }
	Find
	{ after(grammarAccess.getFindAccess().getFindKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Find__Group__2__Impl
	rule__Find__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFindAccess().getDistanceAssignment_2()); }
	(rule__Find__DistanceAssignment_2)
	{ after(grammarAccess.getFindAccess().getDistanceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Find__Group__3__Impl
	rule__Find__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFindAccess().getFromAssignment_3()); }
	(rule__Find__FromAssignment_3)?
	{ after(grammarAccess.getFindAccess().getFromAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Find__Group__4__Impl
	rule__Find__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFindAccess().getAlternatives_4()); }
	(rule__Find__Alternatives_4)?
	{ after(grammarAccess.getFindAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Find__Group__5__Impl
	rule__Find__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFindAccess().getLocatableAssignment_5()); }
	(rule__Find__LocatableAssignment_5)
	{ after(grammarAccess.getFindAccess().getLocatableAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Find__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFindAccess().getSemicolonKeyword_6()); }
	Semicolon
	{ after(grammarAccess.getFindAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__React__ActionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReactAccess().getActionsActionDescParserRuleCall_1_0()); }
		ruleActionDesc
		{ after(grammarAccess.getReactAccess().getActionsActionDescParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__SharedAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionDescAccess().getSharedSharedKeyword_0_0()); }
		(
			{ before(grammarAccess.getActionDescAccess().getSharedSharedKeyword_0_0()); }
			Shared
			{ after(grammarAccess.getActionDescAccess().getSharedSharedKeyword_0_0()); }
		)
		{ after(grammarAccess.getActionDescAccess().getSharedSharedKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionDescAccess().getNameVARNAMETerminalRuleCall_2_0()); }
		RULE_VARNAME
		{ after(grammarAccess.getActionDescAccess().getNameVARNAMETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionDesc__FindsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionDescAccess().getFindsFindParserRuleCall_4_0()); }
		ruleFind
		{ after(grammarAccess.getActionDescAccess().getFindsFindParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__GlobalAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFindAccess().getGlobalGlobalKeyword_0_0()); }
		(
			{ before(grammarAccess.getFindAccess().getGlobalGlobalKeyword_0_0()); }
			Global
			{ after(grammarAccess.getFindAccess().getGlobalGlobalKeyword_0_0()); }
		)
		{ after(grammarAccess.getFindAccess().getGlobalGlobalKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__DistanceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFindAccess().getDistanceDistanceEnumRuleCall_2_0()); }
		ruleDistance
		{ after(grammarAccess.getFindAccess().getDistanceDistanceEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__FromAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFindAccess().getFromFromKeyword_3_0()); }
		(
			{ before(grammarAccess.getFindAccess().getFromFromKeyword_3_0()); }
			From
			{ after(grammarAccess.getFindAccess().getFromFromKeyword_3_0()); }
		)
		{ after(grammarAccess.getFindAccess().getFromFromKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__BurningAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFindAccess().getBurningBurningKeyword_4_0_0()); }
		(
			{ before(grammarAccess.getFindAccess().getBurningBurningKeyword_4_0_0()); }
			Burning
			{ after(grammarAccess.getFindAccess().getBurningBurningKeyword_4_0_0()); }
		)
		{ after(grammarAccess.getFindAccess().getBurningBurningKeyword_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__NormalAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFindAccess().getNormalNormalKeyword_4_1_0()); }
		(
			{ before(grammarAccess.getFindAccess().getNormalNormalKeyword_4_1_0()); }
			Normal
			{ after(grammarAccess.getFindAccess().getNormalNormalKeyword_4_1_0()); }
		)
		{ after(grammarAccess.getFindAccess().getNormalNormalKeyword_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Find__LocatableAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFindAccess().getLocatableLocatableEnumRuleCall_5_0()); }
		ruleLocatable
		{ after(grammarAccess.getFindAccess().getLocatableLocatableEnumRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
