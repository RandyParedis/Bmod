/**
 * generated by Xtext 2.16.0
 */
package org.xtext.ha.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.InMemoryFileSystemAccess;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.ha.rules.Model;
import org.xtext.ha.tests.RulesInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(RulesInjectorProvider.class)
@SuppressWarnings("all")
public class RulesParsingTest {
  @Inject
  @Extension
  private ParseHelper<Model> _parseHelper;
  
  @Inject
  private ValidationTestHelper validator;
  
  @Inject
  private IGenerator2 generator;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Device Window can be OPEN, CLOSED");
      _builder.newLine();
      _builder.append("Device Heating can be ON, OFF");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Rule \"Close Window when Heating is ON\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("when Heating.ON");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("then Window.CLOSED");
      _builder.newLine();
      _builder.newLine();
      _builder.append("Rule \"Switch OFF Heating when Window is OPEN\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("when Window.OPEN");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("then Heating.OFF");
      _builder.newLine();
      final Model model = this._parseHelper.parse(_builder);
      this.validator.assertNoErrors(model);
      final InMemoryFileSystemAccess fsa = new InMemoryFileSystemAccess();
      this.generator.doGenerate(model.eResource(), fsa, null);
      String _string = IterableExtensions.<Object>head(fsa.getAllFiles().values()).toString();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("public static void fire(String event) {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(event.equals(\"opened\")) {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("System.out.println(\"Window is opened!\");");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(event.equals(\"closed\")) {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("System.out.println(\"Window is closed!\");");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(event.equals(\"on\")) {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("System.out.println(\"Heating is on!\");");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(event.equals(\"off\")) {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("System.out.println(\"Heating is off!\");");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(event.equals(\"on\")) {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("fire(\"closed\");");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("if(event.equals(\"opened\")) {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("fire(\"off\");");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _string.contains(_builder_1);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
