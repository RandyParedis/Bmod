/*
 * generated by Xtext 2.16.0
 */
package org.xtext.ha.tests

import com.google.inject.Inject
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.InMemoryFileSystemAccess
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.ha.rules.Model

@RunWith(XtextRunner)
@InjectWith(RulesInjectorProvider)
class RulesParsingTest {
	@Inject extension ParseHelper<Model>
	@Inject ValidationTestHelper validator
	@Inject IGenerator2 generator
	
	@Test
	def void loadModel() {
		val model = '''
			Device Window can be OPEN, CLOSED
			Device Heating can be ON, OFF
			
			Rule "Close Window when Heating is ON"
				when Heating.ON
				then Window.CLOSED
			
			Rule "Switch OFF Heating when Window is OPEN"
				when Window.OPEN
				then Heating.OFF
		'''.parse
		
		validator.assertNoErrors(model)
		
		val fsa = new InMemoryFileSystemAccess
		generator.doGenerate(model.eResource, fsa, null)
		fsa.allFiles.values.head.toString.contains('''
			public static void fire(String event) {
				if(event.equals("opened")) {
					System.out.println("Window is opened!");
				}
				if(event.equals("closed")) {
					System.out.println("Window is closed!");
				}
				if(event.equals("on")) {
					System.out.println("Heating is on!");
				}
				if(event.equals("off")) {
					System.out.println("Heating is off!");
				}
				if(event.equals("on")) {
					fire("closed");
				}
				if(event.equals("opened")) {
					fire("off");
				}
			}
		''')
	}
}