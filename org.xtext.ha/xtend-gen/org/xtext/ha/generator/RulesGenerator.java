/**
 * generated by Xtext 2.16.0
 */
package org.xtext.ha.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Scanner;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.ha.rules.Declaration;
import org.xtext.ha.rules.Device;
import org.xtext.ha.rules.Rule;
import org.xtext.ha.rules.State;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class RulesGenerator implements IGenerator2 {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext ctx) {
    final String simpleClassName = resource.getURI().trimFileExtension().lastSegment();
    EList<EObject> _contents = resource.getContents();
    EObject _head = null;
    if (_contents!=null) {
      _head=IterableExtensions.<EObject>head(_contents);
    }
    boolean _equals = Objects.equal(_head, null);
    if (_equals) {
      return;
    }
    final Iterable<Declaration> declarations = Iterables.<Declaration>filter(IterableExtensions.<EObject>head(resource.getContents()).eContents(), Declaration.class);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class ");
    _builder.append(simpleClassName);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static void fire(String event) {");
    _builder.newLine();
    {
      Iterable<Device> _filter = Iterables.<Device>filter(declarations, Device.class);
      for(final Device device : _filter) {
        {
          EList<State> _states = device.getStates();
          for(final State state : _states) {
            _builder.append("\t\t");
            _builder.append("if(event.equals(\"");
            String _name = state.getName();
            _builder.append(_name, "\t\t");
            _builder.append("\")) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("System.out.println(\"");
            String _name_1 = device.getName();
            _builder.append(_name_1, "\t\t\t");
            _builder.append(" is now ");
            String _name_2 = state.getName();
            _builder.append(_name_2, "\t\t\t");
            _builder.append("!\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    {
      Iterable<Rule> _filter_1 = Iterables.<Rule>filter(declarations, Rule.class);
      for(final Rule rule : _filter_1) {
        _builder.append("\t\t");
        _builder.append("if(event.equals(\"");
        String _name_3 = rule.getWhen().getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("fire(\"");
        String _name_4 = rule.getThen().getName();
        _builder.append(_name_4, "\t\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String... args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try(");
    String _name_5 = Scanner.class.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" scanner = new ");
    String _name_6 = Scanner.class.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append("(System.in)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Welcome home!\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Available commands: \\nbye\");");
    _builder.newLine();
    {
      Iterable<Device> _filter_2 = Iterables.<Device>filter(declarations, Device.class);
      for(final Device device_1 : _filter_2) {
        {
          EList<State> _states_1 = device_1.getStates();
          for(final State state_1 : _states_1) {
            _builder.append("\t\t\t");
            _builder.append("System.out.println(\"");
            String _name_7 = device_1.getName();
            _builder.append(_name_7, "\t\t\t");
            _builder.append("  ");
            String _name_8 = state_1.getName();
            _builder.append(_name_8, "\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t\t\t");
    _builder.append("System.out.println(\"Have fun!\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String command = scanner.next();");
    _builder.newLine();
    {
      Iterable<Device> _filter_3 = Iterables.<Device>filter(declarations, Device.class);
      for(final Device device_2 : _filter_3) {
        _builder.append("\t\t\t\t");
        _builder.append("if(command.equalsIgnoreCase(\"");
        String _name_9 = device_2.getName();
        _builder.append(_name_9, "\t\t\t\t");
        _builder.append("\")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("String secComm = scanner.next();");
        _builder.newLine();
        {
          EList<State> _states_2 = device_2.getStates();
          for(final State state_2 : _states_2) {
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            _builder.append("if(secComm.equalsIgnoreCase(\"");
            String _name_10 = state_2.getName();
            _builder.append(_name_10, "\t\t\t\t\t");
            _builder.append("\")) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("fire(\"");
            String _name_11 = state_2.getName();
            _builder.append(_name_11, "\t\t\t\t\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t");
            _builder.append("\t");
            _builder.append("} else");
            _builder.newLine();
          }
        }
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("System.out.println(\"");
        String _name_12 = device_2.getName();
        _builder.append(_name_12, "\t\t\t\t\t\t");
        _builder.append(" can only have the following states: ");
        String _join = IterableExtensions.join(device_2.getStates(), ",");
        _builder.append(_join, "\t\t\t\t\t\t");
        _builder.append(".\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("if(command.equalsIgnoreCase(\"bye\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("System.out.println(\"Ciao!\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile((simpleClassName + ".java"), _builder);
  }
  
  @Override
  public void afterGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  @Override
  public void beforeGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
}
