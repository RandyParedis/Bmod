/*
 * generated by Xtext 2.16.0
 */
package org.xtext.ha.generator

import java.util.Scanner
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGenerator2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.ha.rules.Declaration
import org.xtext.ha.rules.Device
import org.xtext.ha.rules.Rule

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RulesGenerator implements IGenerator2 {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext ctx) {
		val simpleClassName = resource.getURI.trimFileExtension.lastSegment
		if(resource.contents?.head == null) {
			return;
		}
		val declarations = resource.contents.head.eContents.filter(Declaration);
		fsa.generateFile(simpleClassName + '.java', '''
			public class «simpleClassName» {
				public static void fire(String event) {
					«FOR device: declarations.filter(Device)»
						«FOR state: device.states»
							if(event.equals("«state.name»")) {
								System.out.println("«device.name» is now «state.name»!");
							}
						«ENDFOR»
					«ENDFOR»
					«FOR rule: declarations.filter(Rule)»
						if(event.equals("«rule.when.name»")) {
							fire("«rule.then.name»");
						}
					«ENDFOR»
				}
				
				public static void main(String... args) {
					try(«Scanner.name» scanner = new «Scanner.name»(System.in)) {
						System.out.println("Welcome home!");
						System.out.println("Available commands: \nbye");
						«FOR device: declarations.filter(Device)»
							«FOR state: device.states»
								System.out.println("«device.name»  «state.name»");
							«ENDFOR»
						«ENDFOR»
						System.out.println("Have fun!");
						while(true) {
							String command = scanner.next();
							«FOR device: declarations.filter(Device)»
								if(command.equalsIgnoreCase("«device.name»")) {
									String secComm = scanner.next();
									«FOR state: device.states»
										if(secComm.equalsIgnoreCase("«state.name»")) {
											fire("«state.name»");
										} else
									«ENDFOR»
									{
										System.out.println("«device.name» can only have the following states: «device.states.join(',')».");
									}
								}
							«ENDFOR»
							if(command.equalsIgnoreCase("bye")) {
								System.out.println("Ciao!");
								break;
							}
						}
					}
				}
			}
		''')
	}
	
	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}
	
	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
	}
	
}