/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.jvmmodel

import com.google.inject.Inject
import java.util.List
import org.bmod.simulation.Person
import org.eclipse.xtext.common.types.JvmDeclaredType
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.xtext.bmod.bmod.Floorplan

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class BmodJvmModelInferrer extends AbstractModelInferrer {

	@Inject extension JvmTypesBuilder
	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the lambda you pass as the last argument.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(Floorplan element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
 		acceptor.accept(element.toClass("org.bmod.helper.Operations")) [
 			for (perception : element.perceptions) {
 				members += perception.toMethod("perception_" + perception.name, typeRef(boolean)) [
 					body = perception.body
 					parameters += perception.toParameter(perception.person, typeRef(Person));
 					parameters += perception.toParameter(perception.objects, typeRef(List));
				]
			}
			for (action : element.actions) {
 				members += action.toMethod("action_" + action.name, typeRef(void)) [
 					body = action.body
 					parameters += action.toParameter(action.person, typeRef(Person));
 					parameters += action.toParameter(action.objects, typeRef(List));
				]
			}
		]
	}
}