module org.xtext.bmod.GenerateBmod

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.xtext.bmod"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.xtext.bmod.BReact"
			fileExtensions = "br,breact"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
			}
			parserGenerator = {
				combinedGrammar = false
			}
			
			fragment = ui.quickfix.QuickfixProviderFragment2 {}
		}
		language = StandardLanguage {
			name = "org.xtext.bmod.Bmod"
			fileExtensions = "bmod"

			referencedResource = "platform:/resource/org.xtext.bmod/model/generated/BReact.genmodel"
//			fragment = scoping.ImportNamespacesScopingFragment2 {}

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
			}
			parserGenerator = {
				combinedGrammar = false
			}
		}
	}
}
