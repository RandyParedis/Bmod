/**
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.bmod.breact.ActionDesc;
import org.xtext.bmod.breact.Distance;
import org.xtext.bmod.breact.Find;
import org.xtext.bmod.breact.Locatable;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BReactGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final String simpleClassName = resource.getURI().trimFileExtension().lastSegment();
    EList<EObject> _contents = resource.getContents();
    EObject _head = null;
    if (_contents!=null) {
      _head=IterableExtensions.<EObject>head(_contents);
    }
    boolean _tripleEquals = (_head == null);
    if (_tripleEquals) {
      return;
    }
    final EList<EObject> model = IterableExtensions.<EObject>head(resource.getContents()).eContents();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* This file is generated for a pedsim simulation of Bmod.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* It contains the actionprofiles of the people, generated from BReact.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("#ifndef SIMULATION_TARGETTERS_");
    String _upperCase = simpleClassName.toUpperCase();
    _builder.append(_upperCase);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define SIMULATION_TARGETTERS_");
    String _upperCase_1 = simpleClassName.toUpperCase();
    _builder.append(_upperCase_1);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <cmath>");
    _builder.newLine();
    _builder.append("#include \"../simulation/person.h\"");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.newLine();
    _builder.append("namespace simulation {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("namespace targetters {");
    _builder.newLine();
    {
      Iterable<ActionDesc> _filter = Iterables.<ActionDesc>filter(model, ActionDesc.class);
      for(final ActionDesc action : _filter) {
        _builder.append(" \t\t");
        _builder.append("extern const bool action_");
        String _name = action.getName();
        _builder.append(_name, " \t\t");
        _builder.append("_shared;");
        _builder.newLineIfNotEmpty();
        _builder.append(" \t\t");
        _builder.append("extern Person::TargetterFunc action_");
        String _name_1 = action.getName();
        _builder.append(_name_1, " \t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif // SIMULATION_TARGETTERS_");
    String _upperCase_2 = simpleClassName.toUpperCase();
    _builder.append(_upperCase_2);
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    fsa.generateFile((simpleClassName + "/targetters.h"), _builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("/**");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* This file is generated for a pedsim simulation of Bmod.");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("* It contains the actionprofiles of the people, generated from BReact.");
    _builder_1.newLine();
    _builder_1.append(" ");
    _builder_1.append("*/");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("#include \"targetters.h\"");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("#include \"../simulation/cell.h\"");
    _builder_1.newLine();
    _builder_1.append("#include \"../simulation/floor.h\"");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("#include <cmath>");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("namespace simulation {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("namespace targetters {");
    _builder_1.newLine();
    {
      Iterable<ActionDesc> _filter_1 = Iterables.<ActionDesc>filter(model, ActionDesc.class);
      for(final ActionDesc action_1 : _filter_1) {
        _builder_1.append("\t\t");
        _builder_1.append("const bool action_");
        String _name_2 = action_1.getName();
        _builder_1.append(_name_2, "\t\t");
        _builder_1.append("_shared = ");
        {
          boolean _isShared = action_1.isShared();
          if (_isShared) {
            _builder_1.append("true");
          } else {
            _builder_1.append("false");
          }
        }
        _builder_1.append(";");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t\t");
        _builder_1.append("Person::TargetterFunc action_");
        String _name_3 = action_1.getName();
        _builder_1.append(_name_3, "\t\t");
        _builder_1.append(" = [](const Person* person, const Floor& floor) -> Cell* {");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("\t\t");
        _builder_1.append("\t");
        _builder_1.append("auto dist = [&floor, &person](double x, double y) -> double { return floor.distance(person->getX(), person->getY(), x, y); };");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("\t");
        _builder_1.append("Cell* location = floor.at(person->getX(), person->getY());");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("\t");
        _builder_1.append("std::vector<Person*> ptargets;");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("\t");
        _builder_1.append("std::vector<Cell*> ctargets;");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("\t");
        _builder_1.append("std::vector<Door*> dtargets;");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.newLine();
        {
          EList<Find> _finds = action_1.getFinds();
          for(final Find find : _finds) {
            {
              Locatable _locatable = find.getLocatable();
              boolean _equals = Objects.equal(_locatable, Locatable.PERSON);
              if (_equals) {
                _builder_1.append("\t\t");
                _builder_1.append("\t");
                _builder_1.append("ptargets = floor.find([&person, &floor](const Person* p)->bool {");
                _builder_1.newLine();
                _builder_1.append("\t\t");
                _builder_1.append("\t");
                _builder_1.append("\t");
                _builder_1.append("return (p != person && !p->hasEscaped()");
                {
                  if ((find.isNormal() || find.isBurning())) {
                    _builder_1.append(" && ");
                    {
                      boolean _isNormal = find.isNormal();
                      if (_isNormal) {
                        _builder_1.append("!");
                      }
                    }
                    _builder_1.append("floor.at(p->getX(), p->getY())->onfire");
                  }
                }
                _builder_1.append(");");
                _builder_1.newLineIfNotEmpty();
                _builder_1.append("\t\t");
                _builder_1.append("\t");
                _builder_1.append("}");
                {
                  boolean _isGlobal = find.isGlobal();
                  boolean _not = (!_isGlobal);
                  if (_not) {
                    _builder_1.append(", person");
                  }
                }
                _builder_1.append(");");
                _builder_1.newLineIfNotEmpty();
                _builder_1.append("\t\t");
                _builder_1.append("\t");
                _builder_1.append("if(!ptargets.empty()) {");
                _builder_1.newLine();
                {
                  Distance _distance = find.getDistance();
                  boolean _equals_1 = Objects.equal(_distance, Distance.FIRST);
                  if (_equals_1) {
                    _builder_1.append("\t\t");
                    _builder_1.append("\t");
                    _builder_1.append("\t");
                    _builder_1.append("return floor.at(ptargets.front()->getX(), ptargets.front()->getY());");
                    _builder_1.newLine();
                  } else {
                    Distance _distance_1 = find.getDistance();
                    boolean _equals_2 = Objects.equal(_distance_1, Distance.LAST);
                    if (_equals_2) {
                      _builder_1.append("\t\t");
                      _builder_1.append("\t");
                      _builder_1.append("\t");
                      _builder_1.append("return floor.at(ptargets.back()->getX(), ptargets.back()->getY());");
                      _builder_1.newLine();
                    } else {
                      Distance _distance_2 = find.getDistance();
                      boolean _equals_3 = Objects.equal(_distance_2, Distance.NEAREST);
                      if (_equals_3) {
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("Person* ptarget = nullptr;");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("for(Person* p: ptargets) {");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("if(ptarget == nullptr ||");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t\t");
                        _builder_1.append("dist(p->getX(), p->getY()) < dist(ptarget->getX(), ptarget->getY())) {");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t\t\t");
                        _builder_1.append("ptarget = p;");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("}");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("}");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("if(ptarget != nullptr) {");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("return floor.at(ptarget->getX(), ptarget->getY());");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("}");
                        _builder_1.newLine();
                      } else {
                        {
                          boolean _isFrom = find.isFrom();
                          if (_isFrom) {
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("Cell* farthest = nullptr;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("double fd = 0;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("ctargets = floor.find([](const Cell* c){ return !c->onfire; }");
                            {
                              boolean _isGlobal_1 = find.isGlobal();
                              boolean _not_1 = (!_isGlobal_1);
                              if (_not_1) {
                                _builder_1.append(", location");
                              }
                            }
                            _builder_1.append(");");
                            _builder_1.newLineIfNotEmpty();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("for(Cell* cell: ctargets) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("double d = 0;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("for(Person* p: ptargets) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t\t");
                            _builder_1.append("d += floor.distance(p->getX(), p->getY(), cell->x, cell->y);");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("if(farthest == nullptr || d > fd) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t\t");
                            _builder_1.append("farthest = cell;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t\t");
                            _builder_1.append("fd = d;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("if(farthest != nullptr) { return farthest; }");
                            _builder_1.newLine();
                          } else {
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("Person* ptarget = nullptr;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("for(Person* p: ptargets) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("if(ptarget == nullptr ||");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t\t");
                            _builder_1.append("dist(p->getX(), p->getY()) > dist(ptarget->getX(), ptarget->getY())) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t\t\t");
                            _builder_1.append("ptarget = p;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("if(ptarget != nullptr) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("return floor.at(ptarget->getX(), ptarget->getY());");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                _builder_1.append("\t\t");
                _builder_1.append("\t");
                _builder_1.append("}");
                _builder_1.newLine();
              } else {
                Locatable _locatable_1 = find.getLocatable();
                boolean _equals_4 = Objects.equal(_locatable_1, Locatable.CELL);
                if (_equals_4) {
                  _builder_1.append("\t\t");
                  _builder_1.append("\t");
                  _builder_1.append("ctargets = floor.find([&location](const Cell* c)->bool {");
                  _builder_1.newLine();
                  _builder_1.append("\t\t");
                  _builder_1.append("\t");
                  _builder_1.append("\t");
                  _builder_1.append("return (c != location");
                  {
                    if ((find.isNormal() || find.isBurning())) {
                      _builder_1.append(" && ");
                      {
                        boolean _isNormal_1 = find.isNormal();
                        if (_isNormal_1) {
                          _builder_1.append("!");
                        }
                      }
                      _builder_1.append("c->onfire");
                    }
                  }
                  _builder_1.append(");");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("\t\t");
                  _builder_1.append("\t");
                  _builder_1.append("}");
                  {
                    boolean _isGlobal_2 = find.isGlobal();
                    boolean _not_2 = (!_isGlobal_2);
                    if (_not_2) {
                      _builder_1.append(", location");
                    }
                  }
                  _builder_1.append(");");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("\t\t");
                  _builder_1.append("\t");
                  _builder_1.append("if(!ctargets.empty()) {");
                  _builder_1.newLine();
                  {
                    Distance _distance_3 = find.getDistance();
                    boolean _equals_5 = Objects.equal(_distance_3, Distance.FIRST);
                    if (_equals_5) {
                      _builder_1.append("\t\t");
                      _builder_1.append("\t");
                      _builder_1.append("\t");
                      _builder_1.append("return ctargets.front();");
                      _builder_1.newLine();
                    } else {
                      Distance _distance_4 = find.getDistance();
                      boolean _equals_6 = Objects.equal(_distance_4, Distance.LAST);
                      if (_equals_6) {
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("return ctargets.back();");
                        _builder_1.newLine();
                      } else {
                        Distance _distance_5 = find.getDistance();
                        boolean _equals_7 = Objects.equal(_distance_5, Distance.NEAREST);
                        if (_equals_7) {
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("Cell* ctarget = nullptr;");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("for(Cell* c: ctargets) {");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("if(ctarget == nullptr ||");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t\t");
                          _builder_1.append("dist(c->x, c->y) < dist(ctarget->x, ctarget->y)) {");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t\t\t");
                          _builder_1.append("ctarget = c;");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("}");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("}");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("if(ctarget != nullptr) {");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("return ctarget;");
                          _builder_1.newLine();
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("}");
                          _builder_1.newLine();
                        } else {
                          {
                            boolean _isFrom_1 = find.isFrom();
                            if (_isFrom_1) {
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("Cell* farthest = nullptr;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("double fd = 0;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("std::vector<Cell*> lst = floor.find([](const Cell* c){ return !c->onfire; }");
                              {
                                boolean _isGlobal_3 = find.isGlobal();
                                boolean _not_3 = (!_isGlobal_3);
                                if (_not_3) {
                                  _builder_1.append(", location");
                                }
                              }
                              _builder_1.append(");");
                              _builder_1.newLineIfNotEmpty();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("for(Cell* cell: lst) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("double d = 0;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("for(Cell* c: ctargets) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t\t");
                              _builder_1.append("d += floor.distance(c->x, c->y, cell->x, cell->y);");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("if(farthest == nullptr || d > fd) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t\t");
                              _builder_1.append("farthest = cell;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t\t");
                              _builder_1.append("fd = d;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("if(farthest != nullptr) { return farthest; }");
                              _builder_1.newLine();
                            } else {
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("Cell* ctarget = nullptr;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("for(Cell* c: ctargets) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("if(ctarget == nullptr ||");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t\t");
                              _builder_1.append("dist(c->x, c->y) > dist(ctarget->x, ctarget->y)) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t\t\t");
                              _builder_1.append("ctarget = c;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("if(ctarget != nullptr) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("return ctarget;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                  _builder_1.append("\t\t");
                  _builder_1.append("\t");
                  _builder_1.append("}");
                  _builder_1.newLine();
                } else {
                  Locatable _locatable_2 = find.getLocatable();
                  boolean _equals_8 = Objects.equal(_locatable_2, Locatable.FIRE);
                  if (_equals_8) {
                    _builder_1.append("\t\t");
                    _builder_1.append("\t");
                    _builder_1.append("ctargets = floor.find([&location](const Cell* c)->bool {");
                    _builder_1.newLine();
                    _builder_1.append("\t\t");
                    _builder_1.append("\t");
                    _builder_1.append("\t");
                    _builder_1.append("return (c != location && c->onfire);");
                    _builder_1.newLine();
                    _builder_1.append("\t\t");
                    _builder_1.append("\t");
                    _builder_1.append("}");
                    {
                      boolean _isGlobal_4 = find.isGlobal();
                      boolean _not_4 = (!_isGlobal_4);
                      if (_not_4) {
                        _builder_1.append(", location");
                      }
                    }
                    _builder_1.append(");");
                    _builder_1.newLineIfNotEmpty();
                    _builder_1.append("\t\t");
                    _builder_1.append("\t");
                    _builder_1.append("if(!ctargets.empty()) {");
                    _builder_1.newLine();
                    {
                      Distance _distance_6 = find.getDistance();
                      boolean _equals_9 = Objects.equal(_distance_6, Distance.FIRST);
                      if (_equals_9) {
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("return ctargets.front();");
                        _builder_1.newLine();
                      } else {
                        Distance _distance_7 = find.getDistance();
                        boolean _equals_10 = Objects.equal(_distance_7, Distance.LAST);
                        if (_equals_10) {
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("return ctargets.back();");
                          _builder_1.newLine();
                        } else {
                          Distance _distance_8 = find.getDistance();
                          boolean _equals_11 = Objects.equal(_distance_8, Distance.NEAREST);
                          if (_equals_11) {
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("Cell* ctarget = nullptr;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("for(Cell* c: ctargets) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("if(ctarget == nullptr ||");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t\t");
                            _builder_1.append("dist(c->x, c->y) < dist(ctarget->x, ctarget->y)) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t\t\t");
                            _builder_1.append("ctarget = c;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("if(ctarget != nullptr) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("return ctarget;");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                          } else {
                            {
                              boolean _isFrom_2 = find.isFrom();
                              if (_isFrom_2) {
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("Cell* farthest = nullptr;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("double fd = 0;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("std::vector<Cell*> lst = floor.find([](const Cell* c){ return !c->onfire; }");
                                {
                                  boolean _isGlobal_5 = find.isGlobal();
                                  boolean _not_5 = (!_isGlobal_5);
                                  if (_not_5) {
                                    _builder_1.append(", location");
                                  }
                                }
                                _builder_1.append(");");
                                _builder_1.newLineIfNotEmpty();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("for(Cell* cell: lst) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("double d = 0;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("for(Cell* c: ctargets) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("d += floor.distance(c->x, c->y, cell->x, cell->y);");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("if(farthest == nullptr || d > fd) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("farthest = cell;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("fd = d;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("if(farthest != nullptr) { return farthest; }");
                                _builder_1.newLine();
                              } else {
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("Cell* ctarget = nullptr;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("for(Cell* c: ctargets) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("if(ctarget == nullptr ||");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("dist(c->x, c->y) > dist(ctarget->x, ctarget->y)) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t\t");
                                _builder_1.append("ctarget = c;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("if(ctarget != nullptr) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("return ctarget;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder_1.append("\t\t");
                    _builder_1.append("\t");
                    _builder_1.append("}");
                    _builder_1.newLine();
                  } else {
                    Locatable _locatable_3 = find.getLocatable();
                    boolean _equals_12 = Objects.equal(_locatable_3, Locatable.EXIT);
                    if (_equals_12) {
                      _builder_1.append("\t\t");
                      _builder_1.append("\t");
                      _builder_1.append("ctargets = floor.find([&location, &floor](const Cell* c)->bool {");
                      _builder_1.newLine();
                      _builder_1.append("\t\t");
                      _builder_1.append("\t");
                      _builder_1.append("\t");
                      _builder_1.append("return (c != location && c->exit");
                      {
                        if ((find.isNormal() || find.isBurning())) {
                          _builder_1.append(" && ");
                          {
                            boolean _isNormal_2 = find.isNormal();
                            if (_isNormal_2) {
                              _builder_1.append("!");
                            }
                          }
                          _builder_1.append("c->onfire");
                        }
                      }
                      _builder_1.append(");");
                      _builder_1.newLineIfNotEmpty();
                      _builder_1.append("\t\t");
                      _builder_1.append("\t");
                      _builder_1.append("}");
                      {
                        boolean _isGlobal_6 = find.isGlobal();
                        boolean _not_6 = (!_isGlobal_6);
                        if (_not_6) {
                          _builder_1.append(", location");
                        }
                      }
                      _builder_1.append(");");
                      _builder_1.newLineIfNotEmpty();
                      _builder_1.append("\t\t");
                      _builder_1.append("\t");
                      _builder_1.append("if(!ctargets.empty()) {");
                      _builder_1.newLine();
                      {
                        Distance _distance_9 = find.getDistance();
                        boolean _equals_13 = Objects.equal(_distance_9, Distance.FIRST);
                        if (_equals_13) {
                          _builder_1.append("\t\t");
                          _builder_1.append("\t");
                          _builder_1.append("\t");
                          _builder_1.append("return ctargets.front();");
                          _builder_1.newLine();
                        } else {
                          Distance _distance_10 = find.getDistance();
                          boolean _equals_14 = Objects.equal(_distance_10, Distance.LAST);
                          if (_equals_14) {
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("return ctargets.back();");
                            _builder_1.newLine();
                          } else {
                            Distance _distance_11 = find.getDistance();
                            boolean _equals_15 = Objects.equal(_distance_11, Distance.NEAREST);
                            if (_equals_15) {
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("Cell* ctarget = nullptr;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("for(Cell* c: ctargets) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("if(ctarget == nullptr ||");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t\t");
                              _builder_1.append("dist(c->x, c->y) < dist(ctarget->x, ctarget->y)) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t\t\t");
                              _builder_1.append("ctarget = c;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("if(ctarget != nullptr) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("return ctarget;");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                            } else {
                              {
                                boolean _isFrom_3 = find.isFrom();
                                if (_isFrom_3) {
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("Cell* farthest = nullptr;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("double fd = 0;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("std::vector<Cell*> lst = floor.find([](const Cell* c){ return !c->onfire; }");
                                  {
                                    boolean _isGlobal_7 = find.isGlobal();
                                    boolean _not_7 = (!_isGlobal_7);
                                    if (_not_7) {
                                      _builder_1.append(", location");
                                    }
                                  }
                                  _builder_1.append(");");
                                  _builder_1.newLineIfNotEmpty();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("for(Cell* cell: lst) {");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("double d = 0;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("for(Cell* c: ctargets) {");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t\t");
                                  _builder_1.append("d += floor.distance(c->x, c->y, cell->x, cell->y);");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("}");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("if(farthest == nullptr || d > fd) {");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t\t");
                                  _builder_1.append("farthest = cell;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t\t");
                                  _builder_1.append("fd = d;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("}");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("}");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("if(farthest != nullptr) { return farthest; }");
                                  _builder_1.newLine();
                                } else {
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("Cell* ctarget = nullptr;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("for(Cell* c: ctargets) {");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("if(ctarget == nullptr ||");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t\t");
                                  _builder_1.append("dist(c->x, c->y) > dist(ctarget->x, ctarget->y)) {");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t\t\t");
                                  _builder_1.append("ctarget = c;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("}");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("}");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("if(ctarget != nullptr) {");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("return ctarget;");
                                  _builder_1.newLine();
                                  _builder_1.append("\t\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("\t");
                                  _builder_1.append("}");
                                  _builder_1.newLine();
                                }
                              }
                            }
                          }
                        }
                      }
                      _builder_1.append("\t\t");
                      _builder_1.append("\t");
                      _builder_1.append("}");
                      _builder_1.newLine();
                    } else {
                      Locatable _locatable_4 = find.getLocatable();
                      boolean _equals_16 = Objects.equal(_locatable_4, Locatable.DOOR);
                      if (_equals_16) {
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("dtargets = floor.find([&floor](const Door* d)->bool {");
                        _builder_1.newLine();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("\t");
                        _builder_1.append("return (");
                        {
                          if ((find.isNormal() || find.isBurning())) {
                            {
                              boolean _isNormal_3 = find.isNormal();
                              if (_isNormal_3) {
                                _builder_1.append("!");
                              }
                            }
                            _builder_1.append("floor.at(d->getX1(), d->getY1())->onfire || ");
                            {
                              boolean _isNormal_4 = find.isNormal();
                              if (_isNormal_4) {
                                _builder_1.append("!");
                              }
                            }
                            _builder_1.append("floor.at(d->getX2(), d->getY2())->onfire");
                          } else {
                            _builder_1.append("true");
                          }
                        }
                        _builder_1.append(");");
                        _builder_1.newLineIfNotEmpty();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("}");
                        {
                          boolean _isGlobal_8 = find.isGlobal();
                          boolean _not_8 = (!_isGlobal_8);
                          if (_not_8) {
                            _builder_1.append(", location");
                          }
                        }
                        _builder_1.append(");");
                        _builder_1.newLineIfNotEmpty();
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("if(!dtargets.empty()) {");
                        _builder_1.newLine();
                        {
                          Distance _distance_12 = find.getDistance();
                          boolean _equals_17 = Objects.equal(_distance_12, Distance.FIRST);
                          if (_equals_17) {
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("if(dist(dtargets.front()->getX1(), dtargets.front()->getY1()) > dist(dtargets.front()->getX2(), dtargets.front()->getY2())) {");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("return floor.at(dtargets.front()->getX1(), dtargets.front()->getY1());");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("}");
                            _builder_1.newLine();
                            _builder_1.append("\t\t");
                            _builder_1.append("\t");
                            _builder_1.append("\t");
                            _builder_1.append("return floor.at(dtargets.front()->getX2(), dtargets.front()->getY2());");
                            _builder_1.newLine();
                          } else {
                            Distance _distance_13 = find.getDistance();
                            boolean _equals_18 = Objects.equal(_distance_13, Distance.LAST);
                            if (_equals_18) {
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("if(dist(dtargets.back()->getX1(), dtargets.back()->getY1()) > dist(dtargets.back()->getX2(), dtargets.back()->getY2())) {");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("return floor.at(dtargets.back()->getX1(), dtargets.back()->getY1());");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("}");
                              _builder_1.newLine();
                              _builder_1.append("\t\t");
                              _builder_1.append("\t");
                              _builder_1.append("\t");
                              _builder_1.append("return floor.at(dtargets.back()->getX2(), dtargets.back()->getY2());");
                              _builder_1.newLine();
                            } else {
                              Distance _distance_14 = find.getDistance();
                              boolean _equals_19 = Objects.equal(_distance_14, Distance.NEAREST);
                              if (_equals_19) {
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("Door* dtarget = nullptr;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("for(Door* d: dtargets) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("if(dtarget == nullptr ||");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("dist(d->getX1(), d->getY1()) < dist(dtarget->getX1(), dtarget->getY1()) ||");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("dist(d->getX1(), d->getY1()) < dist(dtarget->getX2(), dtarget->getY2()) ||");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("dist(d->getX2(), d->getY2()) < dist(dtarget->getX1(), dtarget->getY1()) ||");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("dist(d->getX2(), d->getY2()) < dist(dtarget->getX2(), dtarget->getY2())) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t\t");
                                _builder_1.append("dtarget = d;");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("if(dtarget != nullptr) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("if(dist(dtarget->getX1(), dtarget->getY1()) > dist(dtarget->getX2(), dtarget->getY2())) {");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t\t");
                                _builder_1.append("return floor.at(dtarget->getX1(), dtarget->getY1());");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("return floor.at(dtarget->getX2(), dtarget->getY2());");
                                _builder_1.newLine();
                                _builder_1.append("\t\t");
                                _builder_1.append("\t");
                                _builder_1.append("\t");
                                _builder_1.append("}");
                                _builder_1.newLine();
                              } else {
                                {
                                  boolean _isFrom_4 = find.isFrom();
                                  if (_isFrom_4) {
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("Cell* farthest = nullptr;");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("double fd = 0;");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("ctargets = floor.find([](const Cell* c){ return !c->onfire; }");
                                    {
                                      boolean _isGlobal_9 = find.isGlobal();
                                      boolean _not_9 = (!_isGlobal_9);
                                      if (_not_9) {
                                        _builder_1.append(", location");
                                      }
                                    }
                                    _builder_1.append(");");
                                    _builder_1.newLineIfNotEmpty();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("for(Cell* cell: ctargets) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("double d = 0;");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("for(Door* d: dtargets) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("if(dist(d->getX1(), d->getY1()) < dist(d->getX2(), d->getY2()) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t\t");
                                    _builder_1.append("d += floor.distance(d->getX1(), d->getY1(), cell->x, cell->y);");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("} else {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t\t");
                                    _builder_1.append("d += floor.distance(d->getX2(), d->getY2(), cell->x, cell->y);");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("if(farthest == nullptr || d > fd) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("farthest = cell;");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("fd = d;");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("if(farthest != nullptr) { return farthest; }");
                                    _builder_1.newLine();
                                  } else {
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("Door* dtarget = nullptr;");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("for(Door* d: dtargets) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("if(dtarget == nullptr ||");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("dist(d->getX1(), d->getY1()) > dist(dtarget->getX1(), dtarget->getY1()) ||");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("dist(d->getX1(), d->getY1()) > dist(dtarget->getX2(), dtarget->getY2()) ||");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("dist(d->getX2(), d->getY2()) > dist(dtarget->getX1(), dtarget->getY1()) ||");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("dist(d->getX2(), d->getY2()) > dist(dtarget->getX2(), dtarget->getY2())) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t\t");
                                    _builder_1.append("dtarget = d;");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("if(dtarget != nullptr) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("if(dist(dtarget->getX1(), dtarget->getY1()) > dist(dtarget->getX2(), dtarget->getY2())) {");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t\t");
                                    _builder_1.append("return floor.at(dtarget->getX1(), dtarget->getY1());");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("return floor.at(dtarget->getX2(), dtarget->getY2());");
                                    _builder_1.newLine();
                                    _builder_1.append("\t\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("\t");
                                    _builder_1.append("}");
                                    _builder_1.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder_1.append("\t\t");
                        _builder_1.append("\t");
                        _builder_1.append("}");
                        _builder_1.newLine();
                      }
                    }
                  }
                }
              }
            }
            _builder_1.append("\t\t");
            _builder_1.append("\t");
            _builder_1.newLine();
          }
        }
        _builder_1.append("\t\t");
        _builder_1.append("\t");
        _builder_1.append("return nullptr;");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("};");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.newLine();
      }
    }
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    fsa.generateFile((simpleClassName + "/targetters.cpp"), _builder_1);
  }
}
