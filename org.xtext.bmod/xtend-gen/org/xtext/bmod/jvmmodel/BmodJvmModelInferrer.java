/**
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.jvmmodel;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import org.bmod.simulation.Person;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.bmod.bmod.ActionProfile;
import org.xtext.bmod.bmod.Floorplan;
import org.xtext.bmod.bmod.PerceptionLevel;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class BmodJvmModelInferrer extends AbstractModelInferrer {
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final Floorplan element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<PerceptionLevel> _perceptions = element.getPerceptions();
      for (final PerceptionLevel perception : _perceptions) {
        EList<JvmMember> _members = it.getMembers();
        String _name = perception.getName();
        String _plus = ("perception_" + _name);
        final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
          this._jvmTypesBuilder.setBody(it_1, perception.getBody());
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(perception, perception.getPerson(), this._typeReferenceBuilder.typeRef(Person.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
          JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(perception, perception.getObjects(), this._typeReferenceBuilder.typeRef(List.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(perception, _plus, this._typeReferenceBuilder.typeRef(boolean.class), _function_1);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      }
      EList<ActionProfile> _actions = element.getActions();
      for (final ActionProfile action : _actions) {
        EList<JvmMember> _members_1 = it.getMembers();
        String _name_1 = action.getName();
        String _plus_1 = ("action_" + _name_1);
        final Procedure1<JvmOperation> _function_2 = (JvmOperation it_1) -> {
          this._jvmTypesBuilder.setBody(it_1, action.getBody());
          EList<JvmFormalParameter> _parameters = it_1.getParameters();
          JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(action, action.getPerson(), this._typeReferenceBuilder.typeRef(Person.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
          EList<JvmFormalParameter> _parameters_1 = it_1.getParameters();
          JvmFormalParameter _parameter_1 = this._jvmTypesBuilder.toParameter(action, action.getObjects(), this._typeReferenceBuilder.typeRef(List.class));
          this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters_1, _parameter_1);
        };
        JvmOperation _method_1 = this._jvmTypesBuilder.toMethod(action, _plus_1, this._typeReferenceBuilder.typeRef(void.class), _function_2);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method_1);
      }
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, "org.bmod.helper.Operations"), _function);
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Floorplan) {
      _infer((Floorplan)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
