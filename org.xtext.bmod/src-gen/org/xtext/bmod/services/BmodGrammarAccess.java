/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BmodGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Model");
		private final RuleCall cFloorplanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Floorplan;
		@Override public ParserRule getRule() { return rule; }
		
		//Floorplan
		public RuleCall getFloorplanParserRuleCall() { return cFloorplanParserRuleCall; }
	}
	public class FloorplanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Floorplan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloorplanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRoomsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRoomsRoomParserRuleCall_1_0_0 = (RuleCall)cRoomsAssignment_1_0.eContents().get(0);
		private final Assignment cDoorsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDoorsDoorParserRuleCall_1_1_0 = (RuleCall)cDoorsAssignment_1_1.eContents().get(0);
		private final Assignment cPersonsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cPersonsPersonParserRuleCall_1_2_0 = (RuleCall)cPersonsAssignment_1_2.eContents().get(0);
		private final Assignment cProfilesAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cProfilesProfileParserRuleCall_1_3_0 = (RuleCall)cProfilesAssignment_1_3.eContents().get(0);
		private final Assignment cLevelsAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cLevelsLevelParserRuleCall_1_4_0 = (RuleCall)cLevelsAssignment_1_4.eContents().get(0);
		
		//Floorplan:
		//	{Floorplan} (rooms+=Room | doors+=Door | persons+=Person | profiles+=Profile | levels+=Level)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Floorplan} (rooms+=Room | doors+=Door | persons+=Person | profiles+=Profile | levels+=Level)*
		public Group getGroup() { return cGroup; }
		
		//{Floorplan}
		public Action getFloorplanAction_0() { return cFloorplanAction_0; }
		
		//(rooms+=Room | doors+=Door | persons+=Person | profiles+=Profile | levels+=Level)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//rooms+=Room
		public Assignment getRoomsAssignment_1_0() { return cRoomsAssignment_1_0; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_1_0_0() { return cRoomsRoomParserRuleCall_1_0_0; }
		
		//doors+=Door
		public Assignment getDoorsAssignment_1_1() { return cDoorsAssignment_1_1; }
		
		//Door
		public RuleCall getDoorsDoorParserRuleCall_1_1_0() { return cDoorsDoorParserRuleCall_1_1_0; }
		
		//persons+=Person
		public Assignment getPersonsAssignment_1_2() { return cPersonsAssignment_1_2; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_1_2_0() { return cPersonsPersonParserRuleCall_1_2_0; }
		
		//profiles+=Profile
		public Assignment getProfilesAssignment_1_3() { return cProfilesAssignment_1_3; }
		
		//Profile
		public RuleCall getProfilesProfileParserRuleCall_1_3_0() { return cProfilesProfileParserRuleCall_1_3_0; }
		
		//levels+=Level
		public Assignment getLevelsAssignment_1_4() { return cLevelsAssignment_1_4; }
		
		//Level
		public RuleCall getLevelsLevelParserRuleCall_1_4_0() { return cLevelsLevelParserRuleCall_1_4_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamedSTRINGTerminalRuleCall_3_0 = (RuleCall)cNamedAssignment_3.eContents().get(0);
		private final Assignment cAreaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAreaAreaParserRuleCall_4_0 = (RuleCall)cAreaAssignment_4.eContents().get(0);
		
		//Room:
		//	'Room' name=VARNAME 'named' named=STRING
		//	area=Area;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' name=VARNAME 'named' named=STRING area=Area
		public Group getGroup() { return cGroup; }
		
		//'Room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//named=STRING
		public Assignment getNamedAssignment_3() { return cNamedAssignment_3; }
		
		//STRING
		public RuleCall getNamedSTRINGTerminalRuleCall_3_0() { return cNamedSTRINGTerminalRuleCall_3_0; }
		
		//area=Area
		public Assignment getAreaAssignment_4() { return cAreaAssignment_4; }
		
		//Area
		public RuleCall getAreaAreaParserRuleCall_4_0() { return cAreaAreaParserRuleCall_4_0; }
	}
	public class DoorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Door");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromCoordinateParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToCoordinateParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		
		//Door:
		//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Door'
		public Keyword getDoorKeyword_0() { return cDoorKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=Coordinate
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_3_0() { return cFromCoordinateParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=Coordinate
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_5_0() { return cToCoordinateParserRuleCall_5_0; }
	}
	public class ProfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Profile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProfileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Profile:
		//	'Profile' name=VARNAME;
		@Override public ParserRule getRule() { return rule; }
		
		//'Profile' name=VARNAME
		public Group getGroup() { return cGroup; }
		
		//'Profile'
		public Keyword getProfileKeyword_0() { return cProfileKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
	}
	public class LevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Level");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Level:
		//	'Level' name=VARNAME;
		@Override public ParserRule getRule() { return rule; }
		
		//'Level' name=VARNAME
		public Group getGroup() { return cGroup; }
		
		//'Level'
		public Keyword getLevelKeyword_0() { return cLevelKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamedSTRINGTerminalRuleCall_3_0 = (RuleCall)cNamedAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocationCoordinateParserRuleCall_5_0 = (RuleCall)cLocationAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cProfileKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cProfileAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final CrossReference cProfileProfileCrossReference_6_0_2_0 = (CrossReference)cProfileAssignment_6_0_2.eContents().get(0);
		private final RuleCall cProfileProfileVARNAMETerminalRuleCall_6_0_2_0_1 = (RuleCall)cProfileProfileCrossReference_6_0_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_6_0_3 = (Keyword)cGroup_6_0.eContents().get(3);
		private final Keyword cLevelKeyword_6_0_4 = (Keyword)cGroup_6_0.eContents().get(4);
		private final Keyword cColonKeyword_6_0_5 = (Keyword)cGroup_6_0.eContents().get(5);
		private final Assignment cLevelAssignment_6_0_6 = (Assignment)cGroup_6_0.eContents().get(6);
		private final CrossReference cLevelLevelCrossReference_6_0_6_0 = (CrossReference)cLevelAssignment_6_0_6.eContents().get(0);
		private final RuleCall cLevelLevelVARNAMETerminalRuleCall_6_0_6_0_1 = (RuleCall)cLevelLevelCrossReference_6_0_6_0.eContents().get(1);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cLevelKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cColonKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cProfileAssignment_6_1_2 = (Assignment)cGroup_6_1.eContents().get(2);
		private final CrossReference cProfileLevelCrossReference_6_1_2_0 = (CrossReference)cProfileAssignment_6_1_2.eContents().get(0);
		private final RuleCall cProfileLevelVARNAMETerminalRuleCall_6_1_2_0_1 = (RuleCall)cProfileLevelCrossReference_6_1_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_3 = (Keyword)cGroup_6_1.eContents().get(3);
		private final Keyword cProfileKeyword_6_1_4 = (Keyword)cGroup_6_1.eContents().get(4);
		private final Keyword cColonKeyword_6_1_5 = (Keyword)cGroup_6_1.eContents().get(5);
		private final Assignment cLevelAssignment_6_1_6 = (Assignment)cGroup_6_1.eContents().get(6);
		private final CrossReference cLevelProfileCrossReference_6_1_6_0 = (CrossReference)cLevelAssignment_6_1_6.eContents().get(0);
		private final RuleCall cLevelProfileVARNAMETerminalRuleCall_6_1_6_0_1 = (RuleCall)cLevelProfileCrossReference_6_1_6_0.eContents().get(1);
		
		//Person:
		//	'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ('Profile' ':' profile=[Profile|VARNAME] ','
		//	'Level' ':' level=[Level|VARNAME] | 'Level' ':' profile=[Level|VARNAME] ','
		//	'Profile' ':' level=[Profile|VARNAME])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ('Profile' ':' profile=[Profile|VARNAME] ',' 'Level'
		//':' level=[Level|VARNAME] | 'Level' ':' profile=[Level|VARNAME] ',' 'Profile' ':' level=[Profile|VARNAME])?
		public Group getGroup() { return cGroup; }
		
		//'Person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//named=STRING
		public Assignment getNamedAssignment_3() { return cNamedAssignment_3; }
		
		//STRING
		public RuleCall getNamedSTRINGTerminalRuleCall_3_0() { return cNamedSTRINGTerminalRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_5() { return cLocationAssignment_5; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_5_0() { return cLocationCoordinateParserRuleCall_5_0; }
		
		//('Profile' ':' profile=[Profile|VARNAME] ',' 'Level' ':' level=[Level|VARNAME] | 'Level' ':' profile=[Level|VARNAME] ','
		//'Profile' ':' level=[Profile|VARNAME])?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'Profile' ':' profile=[Profile|VARNAME] ',' 'Level' ':' level=[Level|VARNAME]
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'Profile'
		public Keyword getProfileKeyword_6_0_0() { return cProfileKeyword_6_0_0; }
		
		//':'
		public Keyword getColonKeyword_6_0_1() { return cColonKeyword_6_0_1; }
		
		//profile=[Profile|VARNAME]
		public Assignment getProfileAssignment_6_0_2() { return cProfileAssignment_6_0_2; }
		
		//[Profile|VARNAME]
		public CrossReference getProfileProfileCrossReference_6_0_2_0() { return cProfileProfileCrossReference_6_0_2_0; }
		
		//VARNAME
		public RuleCall getProfileProfileVARNAMETerminalRuleCall_6_0_2_0_1() { return cProfileProfileVARNAMETerminalRuleCall_6_0_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_6_0_3() { return cCommaKeyword_6_0_3; }
		
		//'Level'
		public Keyword getLevelKeyword_6_0_4() { return cLevelKeyword_6_0_4; }
		
		//':'
		public Keyword getColonKeyword_6_0_5() { return cColonKeyword_6_0_5; }
		
		//level=[Level|VARNAME]
		public Assignment getLevelAssignment_6_0_6() { return cLevelAssignment_6_0_6; }
		
		//[Level|VARNAME]
		public CrossReference getLevelLevelCrossReference_6_0_6_0() { return cLevelLevelCrossReference_6_0_6_0; }
		
		//VARNAME
		public RuleCall getLevelLevelVARNAMETerminalRuleCall_6_0_6_0_1() { return cLevelLevelVARNAMETerminalRuleCall_6_0_6_0_1; }
		
		//'Level' ':' profile=[Level|VARNAME] ',' 'Profile' ':' level=[Profile|VARNAME]
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'Level'
		public Keyword getLevelKeyword_6_1_0() { return cLevelKeyword_6_1_0; }
		
		//':'
		public Keyword getColonKeyword_6_1_1() { return cColonKeyword_6_1_1; }
		
		//profile=[Level|VARNAME]
		public Assignment getProfileAssignment_6_1_2() { return cProfileAssignment_6_1_2; }
		
		//[Level|VARNAME]
		public CrossReference getProfileLevelCrossReference_6_1_2_0() { return cProfileLevelCrossReference_6_1_2_0; }
		
		//VARNAME
		public RuleCall getProfileLevelVARNAMETerminalRuleCall_6_1_2_0_1() { return cProfileLevelVARNAMETerminalRuleCall_6_1_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_6_1_3() { return cCommaKeyword_6_1_3; }
		
		//'Profile'
		public Keyword getProfileKeyword_6_1_4() { return cProfileKeyword_6_1_4; }
		
		//':'
		public Keyword getColonKeyword_6_1_5() { return cColonKeyword_6_1_5; }
		
		//level=[Profile|VARNAME]
		public Assignment getLevelAssignment_6_1_6() { return cLevelAssignment_6_1_6; }
		
		//[Profile|VARNAME]
		public CrossReference getLevelProfileCrossReference_6_1_6_0() { return cLevelProfileCrossReference_6_1_6_0; }
		
		//VARNAME
		public RuleCall getLevelProfileVARNAMETerminalRuleCall_6_1_6_0_1() { return cLevelProfileVARNAMETerminalRuleCall_6_1_6_0_1; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Coordinate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinate:
		//	'(' x=INT ',' y=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromCoordinateParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToCoordinateParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWithoutAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_1_0 = (RuleCall)cWithoutAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cWithoutAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_2_1_0 = (RuleCall)cWithoutAssignment_4_2_1.eContents().get(0);
		
		//Area:
		//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//from=Coordinate
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_1_0() { return cFromCoordinateParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//to=Coordinate
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_3_0() { return cToCoordinateParserRuleCall_3_0; }
		
		//('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'without'
		public Keyword getWithoutKeyword_4_0() { return cWithoutKeyword_4_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_1() { return cWithoutAssignment_4_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_1_0() { return cWithoutCoordinateParserRuleCall_4_1_0; }
		
		//(',' without+=Coordinate)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_2_1() { return cWithoutAssignment_4_2_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_2_1_0() { return cWithoutCoordinateParserRuleCall_4_2_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final FloorplanElements pFloorplan;
	private final RoomElements pRoom;
	private final DoorElements pDoor;
	private final ProfileElements pProfile;
	private final LevelElements pLevel;
	private final PersonElements pPerson;
	private final CoordinateElements pCoordinate;
	private final AreaElements pArea;
	private final TerminalRule tVARNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BmodGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFloorplan = new FloorplanElements();
		this.pRoom = new RoomElements();
		this.pDoor = new DoorElements();
		this.pProfile = new ProfileElements();
		this.pLevel = new LevelElements();
		this.pPerson = new PersonElements();
		this.pCoordinate = new CoordinateElements();
		this.pArea = new AreaElements();
		this.tVARNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.VARNAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.bmod.Bmod".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Floorplan;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Floorplan:
	//	{Floorplan} (rooms+=Room | doors+=Door | persons+=Person | profiles+=Profile | levels+=Level)*;
	public FloorplanElements getFloorplanAccess() {
		return pFloorplan;
	}
	
	public ParserRule getFloorplanRule() {
		return getFloorplanAccess().getRule();
	}
	
	//Room:
	//	'Room' name=VARNAME 'named' named=STRING
	//	area=Area;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Door:
	//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
	public DoorElements getDoorAccess() {
		return pDoor;
	}
	
	public ParserRule getDoorRule() {
		return getDoorAccess().getRule();
	}
	
	//Profile:
	//	'Profile' name=VARNAME;
	public ProfileElements getProfileAccess() {
		return pProfile;
	}
	
	public ParserRule getProfileRule() {
		return getProfileAccess().getRule();
	}
	
	//Level:
	//	'Level' name=VARNAME;
	public LevelElements getLevelAccess() {
		return pLevel;
	}
	
	public ParserRule getLevelRule() {
		return getLevelAccess().getRule();
	}
	
	//Person:
	//	'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ('Profile' ':' profile=[Profile|VARNAME] ','
	//	'Level' ':' level=[Level|VARNAME] | 'Level' ':' profile=[Level|VARNAME] ','
	//	'Profile' ':' level=[Profile|VARNAME])?;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Coordinate:
	//	'(' x=INT ',' y=INT ')';
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//Area:
	//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//terminal VARNAME:
	//	('A'..'Z' | 'a'..'z' | '_') ('A'..'Z' | 'a'..'z' | '0'..'9' | '_')*;
	public TerminalRule getVARNAMERule() {
		return tVARNAME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
