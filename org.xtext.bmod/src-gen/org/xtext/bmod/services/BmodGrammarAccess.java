/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class BmodGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Model");
		private final RuleCall cFloorplanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Floorplan;
		@Override public ParserRule getRule() { return rule; }
		
		//Floorplan
		public RuleCall getFloorplanParserRuleCall() { return cFloorplanParserRuleCall; }
	}
	public class FloorplanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Floorplan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloorplanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPerceptionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPerceptionsPerceptionLevelParserRuleCall_1_0_0 = (RuleCall)cPerceptionsAssignment_1_0.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cActionsActionProfileParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		private final Assignment cRoomsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cRoomsRoomParserRuleCall_1_2_0 = (RuleCall)cRoomsAssignment_1_2.eContents().get(0);
		private final Assignment cDoorsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cDoorsDoorParserRuleCall_1_3_0 = (RuleCall)cDoorsAssignment_1_3.eContents().get(0);
		private final Assignment cPersonsAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cPersonsPersonParserRuleCall_1_4_0 = (RuleCall)cPersonsAssignment_1_4.eContents().get(0);
		private final Assignment cExitsAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cExitsExitParserRuleCall_1_5_0 = (RuleCall)cExitsAssignment_1_5.eContents().get(0);
		private final Assignment cFiresAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cFiresFireParserRuleCall_1_6_0 = (RuleCall)cFiresAssignment_1_6.eContents().get(0);
		private final Assignment cSignsAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cSignsEmergencySignParserRuleCall_1_7_0 = (RuleCall)cSignsAssignment_1_7.eContents().get(0);
		private final Assignment cDanconsAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cDanconsDangerousConditionParserRuleCall_1_8_0 = (RuleCall)cDanconsAssignment_1_8.eContents().get(0);
		
		//Floorplan:
		//	{Floorplan} (perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person |
		//	exits+=Exit | fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Floorplan} (perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person |
		//exits+=Exit | fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*
		public Group getGroup() { return cGroup; }
		
		//{Floorplan}
		public Action getFloorplanAction_0() { return cFloorplanAction_0; }
		
		//(perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person | exits+=Exit |
		//fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//perceptions+=PerceptionLevel
		public Assignment getPerceptionsAssignment_1_0() { return cPerceptionsAssignment_1_0; }
		
		//PerceptionLevel
		public RuleCall getPerceptionsPerceptionLevelParserRuleCall_1_0_0() { return cPerceptionsPerceptionLevelParserRuleCall_1_0_0; }
		
		//actions+=ActionProfile
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//ActionProfile
		public RuleCall getActionsActionProfileParserRuleCall_1_1_0() { return cActionsActionProfileParserRuleCall_1_1_0; }
		
		//rooms+=Room
		public Assignment getRoomsAssignment_1_2() { return cRoomsAssignment_1_2; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_1_2_0() { return cRoomsRoomParserRuleCall_1_2_0; }
		
		//doors+=Door
		public Assignment getDoorsAssignment_1_3() { return cDoorsAssignment_1_3; }
		
		//Door
		public RuleCall getDoorsDoorParserRuleCall_1_3_0() { return cDoorsDoorParserRuleCall_1_3_0; }
		
		//persons+=Person
		public Assignment getPersonsAssignment_1_4() { return cPersonsAssignment_1_4; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_1_4_0() { return cPersonsPersonParserRuleCall_1_4_0; }
		
		//exits+=Exit
		public Assignment getExitsAssignment_1_5() { return cExitsAssignment_1_5; }
		
		//Exit
		public RuleCall getExitsExitParserRuleCall_1_5_0() { return cExitsExitParserRuleCall_1_5_0; }
		
		//fires+=Fire
		public Assignment getFiresAssignment_1_6() { return cFiresAssignment_1_6; }
		
		//Fire
		public RuleCall getFiresFireParserRuleCall_1_6_0() { return cFiresFireParserRuleCall_1_6_0; }
		
		//signs+=EmergencySign
		public Assignment getSignsAssignment_1_7() { return cSignsAssignment_1_7; }
		
		//EmergencySign
		public RuleCall getSignsEmergencySignParserRuleCall_1_7_0() { return cSignsEmergencySignParserRuleCall_1_7_0; }
		
		//dancons+=DangerousCondition
		public Assignment getDanconsAssignment_1_8() { return cDanconsAssignment_1_8; }
		
		//DangerousCondition
		public RuleCall getDanconsDangerousConditionParserRuleCall_1_8_0() { return cDanconsDangerousConditionParserRuleCall_1_8_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNamedKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamedSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cNamedAssignment_2_1.eContents().get(0);
		private final Assignment cAreasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAreasAreaParserRuleCall_3_0 = (RuleCall)cAreasAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAndKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAreasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAreasAreaParserRuleCall_4_1_0 = (RuleCall)cAreasAssignment_4_1.eContents().get(0);
		
		//Room:
		//	'Room' name=VARNAME ('named' named=STRING)?
		//	areas+=Area ('and' areas+=Area)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' name=VARNAME ('named' named=STRING)? areas+=Area ('and' areas+=Area)*
		public Group getGroup() { return cGroup; }
		
		//'Room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//('named' named=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'named'
		public Keyword getNamedKeyword_2_0() { return cNamedKeyword_2_0; }
		
		//named=STRING
		public Assignment getNamedAssignment_2_1() { return cNamedAssignment_2_1; }
		
		//STRING
		public RuleCall getNamedSTRINGTerminalRuleCall_2_1_0() { return cNamedSTRINGTerminalRuleCall_2_1_0; }
		
		//areas+=Area
		public Assignment getAreasAssignment_3() { return cAreasAssignment_3; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_3_0() { return cAreasAreaParserRuleCall_3_0; }
		
		//('and' areas+=Area)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'and'
		public Keyword getAndKeyword_4_0() { return cAndKeyword_4_0; }
		
		//areas+=Area
		public Assignment getAreasAssignment_4_1() { return cAreasAssignment_4_1; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_4_1_0() { return cAreasAreaParserRuleCall_4_1_0; }
	}
	public class DoorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Door");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromCoordinateParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToCoordinateParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		
		//Door:
		//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Door'
		public Keyword getDoorKeyword_0() { return cDoorKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=Coordinate
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_3_0() { return cFromCoordinateParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=Coordinate
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_5_0() { return cToCoordinateParserRuleCall_5_0; }
	}
	public class PerceptionLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.PerceptionLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPerceptionLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPersonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPersonVARNAMETerminalRuleCall_3_0 = (RuleCall)cPersonAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectsVARNAMETerminalRuleCall_5_0 = (RuleCall)cObjectsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//PerceptionLevel:
		//	'PerceptionLevel' name=VARNAME '(' person=VARNAME ',' objects=VARNAME ')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'PerceptionLevel' name=VARNAME '(' person=VARNAME ',' objects=VARNAME ')' body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'PerceptionLevel'
		public Keyword getPerceptionLevelKeyword_0() { return cPerceptionLevelKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//person=VARNAME
		public Assignment getPersonAssignment_3() { return cPersonAssignment_3; }
		
		//VARNAME
		public RuleCall getPersonVARNAMETerminalRuleCall_3_0() { return cPersonVARNAMETerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//objects=VARNAME
		public Assignment getObjectsAssignment_5() { return cObjectsAssignment_5; }
		
		//VARNAME
		public RuleCall getObjectsVARNAMETerminalRuleCall_5_0() { return cObjectsVARNAMETerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_7_0() { return cBodyXBlockExpressionParserRuleCall_7_0; }
	}
	public class ActionProfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.ActionProfile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionProfileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPersonAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPersonVARNAMETerminalRuleCall_3_0 = (RuleCall)cPersonAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cObjectsVARNAMETerminalRuleCall_5_0 = (RuleCall)cObjectsAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//ActionProfile:
		//	'ActionProfile' name=VARNAME '(' person=VARNAME ',' objects=VARNAME ')'
		//	body=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'ActionProfile' name=VARNAME '(' person=VARNAME ',' objects=VARNAME ')' body=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//'ActionProfile'
		public Keyword getActionProfileKeyword_0() { return cActionProfileKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//person=VARNAME
		public Assignment getPersonAssignment_3() { return cPersonAssignment_3; }
		
		//VARNAME
		public RuleCall getPersonVARNAMETerminalRuleCall_3_0() { return cPersonVARNAMETerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//objects=VARNAME
		public Assignment getObjectsAssignment_5() { return cObjectsAssignment_5; }
		
		//VARNAME
		public RuleCall getObjectsVARNAMETerminalRuleCall_5_0() { return cObjectsVARNAMETerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//body=XBlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_7_0() { return cBodyXBlockExpressionParserRuleCall_7_0; }
	}
	public class PerceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Perception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExistingAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExistingPerceptionEnumEnumRuleCall_0_0 = (RuleCall)cExistingAssignment_0.eContents().get(0);
		private final Assignment cCustomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomPerceptionLevelCrossReference_1_0 = (CrossReference)cCustomAssignment_1.eContents().get(0);
		private final RuleCall cCustomPerceptionLevelVARNAMETerminalRuleCall_1_0_1 = (RuleCall)cCustomPerceptionLevelCrossReference_1_0.eContents().get(1);
		
		//Perception:
		//	existing=PerceptionEnum | custom=[PerceptionLevel|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//existing=PerceptionEnum | custom=[PerceptionLevel|VARNAME]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//existing=PerceptionEnum
		public Assignment getExistingAssignment_0() { return cExistingAssignment_0; }
		
		//PerceptionEnum
		public RuleCall getExistingPerceptionEnumEnumRuleCall_0_0() { return cExistingPerceptionEnumEnumRuleCall_0_0; }
		
		//custom=[PerceptionLevel|VARNAME]
		public Assignment getCustomAssignment_1() { return cCustomAssignment_1; }
		
		//[PerceptionLevel|VARNAME]
		public CrossReference getCustomPerceptionLevelCrossReference_1_0() { return cCustomPerceptionLevelCrossReference_1_0; }
		
		//VARNAME
		public RuleCall getCustomPerceptionLevelVARNAMETerminalRuleCall_1_0_1() { return cCustomPerceptionLevelVARNAMETerminalRuleCall_1_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExistingAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExistingActionEnumEnumRuleCall_0_0 = (RuleCall)cExistingAssignment_0.eContents().get(0);
		private final Assignment cCustomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomActionProfileCrossReference_1_0 = (CrossReference)cCustomAssignment_1.eContents().get(0);
		private final RuleCall cCustomActionProfileVARNAMETerminalRuleCall_1_0_1 = (RuleCall)cCustomActionProfileCrossReference_1_0.eContents().get(1);
		
		//Action:
		//	existing=ActionEnum | custom=[ActionProfile|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//existing=ActionEnum | custom=[ActionProfile|VARNAME]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//existing=ActionEnum
		public Assignment getExistingAssignment_0() { return cExistingAssignment_0; }
		
		//ActionEnum
		public RuleCall getExistingActionEnumEnumRuleCall_0_0() { return cExistingActionEnumEnumRuleCall_0_0; }
		
		//custom=[ActionProfile|VARNAME]
		public Assignment getCustomAssignment_1() { return cCustomAssignment_1; }
		
		//[ActionProfile|VARNAME]
		public CrossReference getCustomActionProfileCrossReference_1_0() { return cCustomActionProfileCrossReference_1_0; }
		
		//VARNAME
		public RuleCall getCustomActionProfileVARNAMETerminalRuleCall_1_0_1() { return cCustomActionProfileVARNAMETerminalRuleCall_1_0_1; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamedSTRINGTerminalRuleCall_3_0 = (RuleCall)cNamedAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocationCoordinateParserRuleCall_5_0 = (RuleCall)cLocationAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPerceptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPerceptionPerceptionParserRuleCall_7_0 = (RuleCall)cPerceptionAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cActionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cActionActionParserRuleCall_9_0 = (RuleCall)cActionAssignment_9.eContents().get(0);
		
		//Person:
		//	'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ':'
		//	perception=Perception ',' action=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ':' perception=Perception ',' action=Action
		public Group getGroup() { return cGroup; }
		
		//'Person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//named=STRING
		public Assignment getNamedAssignment_3() { return cNamedAssignment_3; }
		
		//STRING
		public RuleCall getNamedSTRINGTerminalRuleCall_3_0() { return cNamedSTRINGTerminalRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_5() { return cLocationAssignment_5; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_5_0() { return cLocationCoordinateParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//perception=Perception
		public Assignment getPerceptionAssignment_7() { return cPerceptionAssignment_7; }
		
		//Perception
		public RuleCall getPerceptionPerceptionParserRuleCall_7_0() { return cPerceptionPerceptionParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//action=Action
		public Assignment getActionAssignment_9() { return cActionAssignment_9; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_9_0() { return cActionActionParserRuleCall_9_0; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationCoordinateParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//Exit:
		//	'Exit' 'in' location=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Exit' 'in' location=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Exit'
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_2_0() { return cLocationCoordinateParserRuleCall_2_0; }
	}
	public class FireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Fire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationCoordinateParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//Fire:
		//	'Fire' 'in' location=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fire' 'in' location=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Fire'
		public Keyword getFireKeyword_0() { return cFireKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_2_0() { return cLocationCoordinateParserRuleCall_2_0; }
	}
	public class EmergencySignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.EmergencySign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOnDoorCrossReference_2_0 = (CrossReference)cOnAssignment_2.eContents().get(0);
		private final RuleCall cOnDoorVARNAMETerminalRuleCall_2_0_1 = (RuleCall)cOnDoorCrossReference_2_0.eContents().get(1);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToDoorRefParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		
		//EmergencySign:
		//	'Sign' 'on' on=[Door|VARNAME] to=DoorRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sign' 'on' on=[Door|VARNAME] to=DoorRef
		public Group getGroup() { return cGroup; }
		
		//'Sign'
		public Keyword getSignKeyword_0() { return cSignKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//on=[Door|VARNAME]
		public Assignment getOnAssignment_2() { return cOnAssignment_2; }
		
		//[Door|VARNAME]
		public CrossReference getOnDoorCrossReference_2_0() { return cOnDoorCrossReference_2_0; }
		
		//VARNAME
		public RuleCall getOnDoorVARNAMETerminalRuleCall_2_0_1() { return cOnDoorVARNAMETerminalRuleCall_2_0_1; }
		
		//to=DoorRef
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//DoorRef
		public RuleCall getToDoorRefParserRuleCall_3_0() { return cToDoorRefParserRuleCall_3_0; }
	}
	public class DoorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.DoorRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefDoorCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefDoorVARNAMETerminalRuleCall_1_0_1 = (RuleCall)cRefDoorCrossReference_1_0.eContents().get(1);
		
		//DoorRef:
		//	'to' ref=[Door|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//'to' ref=[Door|VARNAME]
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//ref=[Door|VARNAME]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Door|VARNAME]
		public CrossReference getRefDoorCrossReference_1_0() { return cRefDoorCrossReference_1_0; }
		
		//VARNAME
		public RuleCall getRefDoorVARNAMETerminalRuleCall_1_0_1() { return cRefDoorVARNAMETerminalRuleCall_1_0_1; }
	}
	public class DangerousConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.DangerousCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOnRoomCrossReference_2_0 = (CrossReference)cOnAssignment_2.eContents().get(0);
		private final RuleCall cOnRoomVARNAMETerminalRuleCall_2_0_1 = (RuleCall)cOnRoomCrossReference_2_0.eContents().get(1);
		private final Assignment cAmountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountINTTerminalRuleCall_3_0 = (RuleCall)cAmountAssignment_3.eContents().get(0);
		
		//DangerousCondition:
		//	'Condition' 'on' on=[Room|VARNAME] amount=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' 'on' on=[Room|VARNAME] amount=INT
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//on=[Room|VARNAME]
		public Assignment getOnAssignment_2() { return cOnAssignment_2; }
		
		//[Room|VARNAME]
		public CrossReference getOnRoomCrossReference_2_0() { return cOnRoomCrossReference_2_0; }
		
		//VARNAME
		public RuleCall getOnRoomVARNAMETerminalRuleCall_2_0_1() { return cOnRoomVARNAMETerminalRuleCall_2_0_1; }
		
		//amount=INT
		public Assignment getAmountAssignment_3() { return cAmountAssignment_3; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_3_0() { return cAmountINTTerminalRuleCall_3_0; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Coordinate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinate:
		//	'(' x=INT ',' y=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromCoordinateParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToCoordinateParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWithoutAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_1_0 = (RuleCall)cWithoutAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cWithoutAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_2_1_0 = (RuleCall)cWithoutAssignment_4_2_1.eContents().get(0);
		
		//Area:
		//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//from=Coordinate
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_1_0() { return cFromCoordinateParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//to=Coordinate
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_3_0() { return cToCoordinateParserRuleCall_3_0; }
		
		//('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'without'
		public Keyword getWithoutKeyword_4_0() { return cWithoutKeyword_4_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_1() { return cWithoutAssignment_4_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_1_0() { return cWithoutCoordinateParserRuleCall_4_1_0; }
		
		//(',' without+=Coordinate)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_2_1() { return cWithoutAssignment_4_2_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_2_1_0() { return cWithoutCoordinateParserRuleCall_4_2_1_0; }
	}
	
	public class PerceptionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.PerceptionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAttentiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAttentiveAttentiveKeyword_0_0 = (Keyword)cAttentiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRelaxedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRelaxedRelaxedKeyword_1_0 = (Keyword)cRelaxedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOptimisticEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOptimisticOptimisticKeyword_2_0 = (Keyword)cOptimisticEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cScepticEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cScepticScepticKeyword_3_0 = (Keyword)cScepticEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PerceptionEnum:
		//	attentive | relaxed |
		//	optimistic | sceptic;
		public EnumRule getRule() { return rule; }
		
		//attentive | relaxed | optimistic | sceptic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attentive
		public EnumLiteralDeclaration getAttentiveEnumLiteralDeclaration_0() { return cAttentiveEnumLiteralDeclaration_0; }
		
		//'attentive'
		public Keyword getAttentiveAttentiveKeyword_0_0() { return cAttentiveAttentiveKeyword_0_0; }
		
		//relaxed
		public EnumLiteralDeclaration getRelaxedEnumLiteralDeclaration_1() { return cRelaxedEnumLiteralDeclaration_1; }
		
		//'relaxed'
		public Keyword getRelaxedRelaxedKeyword_1_0() { return cRelaxedRelaxedKeyword_1_0; }
		
		//optimistic
		public EnumLiteralDeclaration getOptimisticEnumLiteralDeclaration_2() { return cOptimisticEnumLiteralDeclaration_2; }
		
		//'optimistic'
		public Keyword getOptimisticOptimisticKeyword_2_0() { return cOptimisticOptimisticKeyword_2_0; }
		
		//sceptic
		public EnumLiteralDeclaration getScepticEnumLiteralDeclaration_3() { return cScepticEnumLiteralDeclaration_3; }
		
		//'sceptic'
		public Keyword getScepticScepticKeyword_3_0() { return cScepticScepticKeyword_3_0; }
	}
	public class ActionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.ActionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNewcomerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNewcomerNewcomerKeyword_0_0 = (Keyword)cNewcomerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExperiencedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExperiencedExperiencedKeyword_1_0 = (Keyword)cExperiencedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPanicEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPanicPanicKeyword_2_0 = (Keyword)cPanicEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ActionEnum:
		//	newcomer | experienced | panic;
		public EnumRule getRule() { return rule; }
		
		//newcomer | experienced | panic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//newcomer
		public EnumLiteralDeclaration getNewcomerEnumLiteralDeclaration_0() { return cNewcomerEnumLiteralDeclaration_0; }
		
		//'newcomer'
		public Keyword getNewcomerNewcomerKeyword_0_0() { return cNewcomerNewcomerKeyword_0_0; }
		
		//experienced
		public EnumLiteralDeclaration getExperiencedEnumLiteralDeclaration_1() { return cExperiencedEnumLiteralDeclaration_1; }
		
		//'experienced'
		public Keyword getExperiencedExperiencedKeyword_1_0() { return cExperiencedExperiencedKeyword_1_0; }
		
		//panic
		public EnumLiteralDeclaration getPanicEnumLiteralDeclaration_2() { return cPanicEnumLiteralDeclaration_2; }
		
		//'panic'
		public Keyword getPanicPanicKeyword_2_0() { return cPanicPanicKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final FloorplanElements pFloorplan;
	private final RoomElements pRoom;
	private final DoorElements pDoor;
	private final PerceptionLevelElements pPerceptionLevel;
	private final ActionProfileElements pActionProfile;
	private final PerceptionElements pPerception;
	private final ActionElements pAction;
	private final PerceptionEnumElements ePerceptionEnum;
	private final ActionEnumElements eActionEnum;
	private final PersonElements pPerson;
	private final ExitElements pExit;
	private final FireElements pFire;
	private final EmergencySignElements pEmergencySign;
	private final DoorRefElements pDoorRef;
	private final DangerousConditionElements pDangerousCondition;
	private final CoordinateElements pCoordinate;
	private final AreaElements pArea;
	private final TerminalRule tVARNAME;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public BmodGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pFloorplan = new FloorplanElements();
		this.pRoom = new RoomElements();
		this.pDoor = new DoorElements();
		this.pPerceptionLevel = new PerceptionLevelElements();
		this.pActionProfile = new ActionProfileElements();
		this.pPerception = new PerceptionElements();
		this.pAction = new ActionElements();
		this.ePerceptionEnum = new PerceptionEnumElements();
		this.eActionEnum = new ActionEnumElements();
		this.pPerson = new PersonElements();
		this.pExit = new ExitElements();
		this.pFire = new FireElements();
		this.pEmergencySign = new EmergencySignElements();
		this.pDoorRef = new DoorRefElements();
		this.pDangerousCondition = new DangerousConditionElements();
		this.pCoordinate = new CoordinateElements();
		this.pArea = new AreaElements();
		this.tVARNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.VARNAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.bmod.Bmod".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//	Floorplan;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Floorplan:
	//	{Floorplan} (perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person |
	//	exits+=Exit | fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*;
	public FloorplanElements getFloorplanAccess() {
		return pFloorplan;
	}
	
	public ParserRule getFloorplanRule() {
		return getFloorplanAccess().getRule();
	}
	
	//Room:
	//	'Room' name=VARNAME ('named' named=STRING)?
	//	areas+=Area ('and' areas+=Area)*;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Door:
	//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
	public DoorElements getDoorAccess() {
		return pDoor;
	}
	
	public ParserRule getDoorRule() {
		return getDoorAccess().getRule();
	}
	
	//PerceptionLevel:
	//	'PerceptionLevel' name=VARNAME '(' person=VARNAME ',' objects=VARNAME ')'
	//	body=XBlockExpression;
	public PerceptionLevelElements getPerceptionLevelAccess() {
		return pPerceptionLevel;
	}
	
	public ParserRule getPerceptionLevelRule() {
		return getPerceptionLevelAccess().getRule();
	}
	
	//ActionProfile:
	//	'ActionProfile' name=VARNAME '(' person=VARNAME ',' objects=VARNAME ')'
	//	body=XBlockExpression;
	public ActionProfileElements getActionProfileAccess() {
		return pActionProfile;
	}
	
	public ParserRule getActionProfileRule() {
		return getActionProfileAccess().getRule();
	}
	
	//Perception:
	//	existing=PerceptionEnum | custom=[PerceptionLevel|VARNAME];
	public PerceptionElements getPerceptionAccess() {
		return pPerception;
	}
	
	public ParserRule getPerceptionRule() {
		return getPerceptionAccess().getRule();
	}
	
	//Action:
	//	existing=ActionEnum | custom=[ActionProfile|VARNAME];
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum PerceptionEnum:
	//	attentive | relaxed |
	//	optimistic | sceptic;
	public PerceptionEnumElements getPerceptionEnumAccess() {
		return ePerceptionEnum;
	}
	
	public EnumRule getPerceptionEnumRule() {
		return getPerceptionEnumAccess().getRule();
	}
	
	//enum ActionEnum:
	//	newcomer | experienced | panic;
	public ActionEnumElements getActionEnumAccess() {
		return eActionEnum;
	}
	
	public EnumRule getActionEnumRule() {
		return getActionEnumAccess().getRule();
	}
	
	//Person:
	//	'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ':'
	//	perception=Perception ',' action=Action;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Exit:
	//	'Exit' 'in' location=Coordinate;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//Fire:
	//	'Fire' 'in' location=Coordinate;
	public FireElements getFireAccess() {
		return pFire;
	}
	
	public ParserRule getFireRule() {
		return getFireAccess().getRule();
	}
	
	//EmergencySign:
	//	'Sign' 'on' on=[Door|VARNAME] to=DoorRef;
	public EmergencySignElements getEmergencySignAccess() {
		return pEmergencySign;
	}
	
	public ParserRule getEmergencySignRule() {
		return getEmergencySignAccess().getRule();
	}
	
	//DoorRef:
	//	'to' ref=[Door|VARNAME];
	public DoorRefElements getDoorRefAccess() {
		return pDoorRef;
	}
	
	public ParserRule getDoorRefRule() {
		return getDoorRefAccess().getRule();
	}
	
	//DangerousCondition:
	//	'Condition' 'on' on=[Room|VARNAME] amount=INT;
	public DangerousConditionElements getDangerousConditionAccess() {
		return pDangerousCondition;
	}
	
	public ParserRule getDangerousConditionRule() {
		return getDangerousConditionAccess().getRule();
	}
	
	//Coordinate:
	//	'(' x=INT ',' y=INT ')';
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//Area:
	//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//terminal VARNAME:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getVARNAMERule() {
		return tVARNAME;
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
