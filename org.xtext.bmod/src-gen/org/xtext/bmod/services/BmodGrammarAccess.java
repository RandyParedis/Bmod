/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BmodGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Model");
		private final RuleCall cFloorplanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Floorplan;
		@Override public ParserRule getRule() { return rule; }
		
		//Floorplan
		public RuleCall getFloorplanParserRuleCall() { return cFloorplanParserRuleCall; }
	}
	public class FloorplanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Floorplan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloorplanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRoomsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRoomsRoomParserRuleCall_1_0_0 = (RuleCall)cRoomsAssignment_1_0.eContents().get(0);
		private final Assignment cDoorsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDoorsDoorParserRuleCall_1_1_0 = (RuleCall)cDoorsAssignment_1_1.eContents().get(0);
		private final Assignment cPersonsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cPersonsPersonParserRuleCall_1_2_0 = (RuleCall)cPersonsAssignment_1_2.eContents().get(0);
		private final Assignment cExitsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cExitsExitParserRuleCall_1_3_0 = (RuleCall)cExitsAssignment_1_3.eContents().get(0);
		private final Assignment cSignsAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cSignsEmergencySignParserRuleCall_1_4_0 = (RuleCall)cSignsAssignment_1_4.eContents().get(0);
		private final Assignment cDanconsAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cDanconsDangerousConditionParserRuleCall_1_5_0 = (RuleCall)cDanconsAssignment_1_5.eContents().get(0);
		
		//Floorplan:
		//	{Floorplan} (rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | signs+=EmergencySign |
		//	dancons+=DangerousCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Floorplan} (rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | signs+=EmergencySign |
		//dancons+=DangerousCondition)*
		public Group getGroup() { return cGroup; }
		
		//{Floorplan}
		public Action getFloorplanAction_0() { return cFloorplanAction_0; }
		
		//(rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | signs+=EmergencySign | dancons+=DangerousCondition)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//rooms+=Room
		public Assignment getRoomsAssignment_1_0() { return cRoomsAssignment_1_0; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_1_0_0() { return cRoomsRoomParserRuleCall_1_0_0; }
		
		//doors+=Door
		public Assignment getDoorsAssignment_1_1() { return cDoorsAssignment_1_1; }
		
		//Door
		public RuleCall getDoorsDoorParserRuleCall_1_1_0() { return cDoorsDoorParserRuleCall_1_1_0; }
		
		//persons+=Person
		public Assignment getPersonsAssignment_1_2() { return cPersonsAssignment_1_2; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_1_2_0() { return cPersonsPersonParserRuleCall_1_2_0; }
		
		//exits+=Exit
		public Assignment getExitsAssignment_1_3() { return cExitsAssignment_1_3; }
		
		//Exit
		public RuleCall getExitsExitParserRuleCall_1_3_0() { return cExitsExitParserRuleCall_1_3_0; }
		
		//signs+=EmergencySign
		public Assignment getSignsAssignment_1_4() { return cSignsAssignment_1_4; }
		
		//EmergencySign
		public RuleCall getSignsEmergencySignParserRuleCall_1_4_0() { return cSignsEmergencySignParserRuleCall_1_4_0; }
		
		//dancons+=DangerousCondition
		public Assignment getDanconsAssignment_1_5() { return cDanconsAssignment_1_5; }
		
		//DangerousCondition
		public RuleCall getDanconsDangerousConditionParserRuleCall_1_5_0() { return cDanconsDangerousConditionParserRuleCall_1_5_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamedSTRINGTerminalRuleCall_3_0 = (RuleCall)cNamedAssignment_3.eContents().get(0);
		private final Assignment cAreasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAreasAreaParserRuleCall_4_0 = (RuleCall)cAreasAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAndKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAreasAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAreasAreaParserRuleCall_5_1_0 = (RuleCall)cAreasAssignment_5_1.eContents().get(0);
		
		//Room:
		//	'Room' name=VARNAME 'named' named=STRING
		//	areas+=Area ('and' areas+=Area)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' name=VARNAME 'named' named=STRING areas+=Area ('and' areas+=Area)*
		public Group getGroup() { return cGroup; }
		
		//'Room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//named=STRING
		public Assignment getNamedAssignment_3() { return cNamedAssignment_3; }
		
		//STRING
		public RuleCall getNamedSTRINGTerminalRuleCall_3_0() { return cNamedSTRINGTerminalRuleCall_3_0; }
		
		//areas+=Area
		public Assignment getAreasAssignment_4() { return cAreasAssignment_4; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_4_0() { return cAreasAreaParserRuleCall_4_0; }
		
		//('and' areas+=Area)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'and'
		public Keyword getAndKeyword_5_0() { return cAndKeyword_5_0; }
		
		//areas+=Area
		public Assignment getAreasAssignment_5_1() { return cAreasAssignment_5_1; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_5_1_0() { return cAreasAreaParserRuleCall_5_1_0; }
	}
	public class DoorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Door");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromCoordinateParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToCoordinateParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		
		//Door:
		//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Door'
		public Keyword getDoorKeyword_0() { return cDoorKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=Coordinate
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_3_0() { return cFromCoordinateParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=Coordinate
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_5_0() { return cToCoordinateParserRuleCall_5_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNamedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamedSTRINGTerminalRuleCall_3_0 = (RuleCall)cNamedAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocationCoordinateParserRuleCall_5_0 = (RuleCall)cLocationAssignment_5.eContents().get(0);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Assignment cPerceptionAssignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final RuleCall cPerceptionPerceptionEnumRuleCall_7_0_0_0 = (RuleCall)cPerceptionAssignment_7_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_7_0_1 = (Keyword)cGroup_7_0.eContents().get(1);
		private final Assignment cActionAssignment_7_0_2 = (Assignment)cGroup_7_0.eContents().get(2);
		private final RuleCall cActionActionEnumRuleCall_7_0_2_0 = (RuleCall)cActionAssignment_7_0_2.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Assignment cActionAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cActionActionEnumRuleCall_7_1_0_0 = (RuleCall)cActionAssignment_7_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Assignment cPerceptionAssignment_7_1_2 = (Assignment)cGroup_7_1.eContents().get(2);
		private final RuleCall cPerceptionPerceptionEnumRuleCall_7_1_2_0 = (RuleCall)cPerceptionAssignment_7_1_2.eContents().get(0);
		
		//Person:
		//	'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ':' (perception=Perception ',' action=Action |
		//	action=Action ',' perception=Perception);
		@Override public ParserRule getRule() { return rule; }
		
		//'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ':' (perception=Perception ',' action=Action |
		//action=Action ',' perception=Perception)
		public Group getGroup() { return cGroup; }
		
		//'Person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'named'
		public Keyword getNamedKeyword_2() { return cNamedKeyword_2; }
		
		//named=STRING
		public Assignment getNamedAssignment_3() { return cNamedAssignment_3; }
		
		//STRING
		public RuleCall getNamedSTRINGTerminalRuleCall_3_0() { return cNamedSTRINGTerminalRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_5() { return cLocationAssignment_5; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_5_0() { return cLocationCoordinateParserRuleCall_5_0; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//perception=Perception ',' action=Action | action=Action ',' perception=Perception
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//perception=Perception ',' action=Action
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//perception=Perception
		public Assignment getPerceptionAssignment_7_0_0() { return cPerceptionAssignment_7_0_0; }
		
		//Perception
		public RuleCall getPerceptionPerceptionEnumRuleCall_7_0_0_0() { return cPerceptionPerceptionEnumRuleCall_7_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_7_0_1() { return cCommaKeyword_7_0_1; }
		
		//action=Action
		public Assignment getActionAssignment_7_0_2() { return cActionAssignment_7_0_2; }
		
		//Action
		public RuleCall getActionActionEnumRuleCall_7_0_2_0() { return cActionActionEnumRuleCall_7_0_2_0; }
		
		//action=Action ',' perception=Perception
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//action=Action
		public Assignment getActionAssignment_7_1_0() { return cActionAssignment_7_1_0; }
		
		//Action
		public RuleCall getActionActionEnumRuleCall_7_1_0_0() { return cActionActionEnumRuleCall_7_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_7_1_1() { return cCommaKeyword_7_1_1; }
		
		//perception=Perception
		public Assignment getPerceptionAssignment_7_1_2() { return cPerceptionAssignment_7_1_2; }
		
		//Perception
		public RuleCall getPerceptionPerceptionEnumRuleCall_7_1_2_0() { return cPerceptionPerceptionEnumRuleCall_7_1_2_0; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationCoordinateParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//Exit:
		//	'Exit' 'in' location=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Exit' 'in' location=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Exit'
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_2_0() { return cLocationCoordinateParserRuleCall_2_0; }
	}
	public class EmergencySignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.EmergencySign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOnDoorCrossReference_2_0 = (CrossReference)cOnAssignment_2.eContents().get(0);
		private final RuleCall cOnDoorVARNAMETerminalRuleCall_2_0_1 = (RuleCall)cOnDoorCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToDoorCrossReference_4_0 = (CrossReference)cToAssignment_4.eContents().get(0);
		private final RuleCall cToDoorVARNAMETerminalRuleCall_4_0_1 = (RuleCall)cToDoorCrossReference_4_0.eContents().get(1);
		
		//EmergencySign:
		//	'Sign' 'on' on=[Door|VARNAME] 'to' to=[Door|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//'Sign' 'on' on=[Door|VARNAME] 'to' to=[Door|VARNAME]
		public Group getGroup() { return cGroup; }
		
		//'Sign'
		public Keyword getSignKeyword_0() { return cSignKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//on=[Door|VARNAME]
		public Assignment getOnAssignment_2() { return cOnAssignment_2; }
		
		//[Door|VARNAME]
		public CrossReference getOnDoorCrossReference_2_0() { return cOnDoorCrossReference_2_0; }
		
		//VARNAME
		public RuleCall getOnDoorVARNAMETerminalRuleCall_2_0_1() { return cOnDoorVARNAMETerminalRuleCall_2_0_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//to=[Door|VARNAME]
		public Assignment getToAssignment_4() { return cToAssignment_4; }
		
		//[Door|VARNAME]
		public CrossReference getToDoorCrossReference_4_0() { return cToDoorCrossReference_4_0; }
		
		//VARNAME
		public RuleCall getToDoorVARNAMETerminalRuleCall_4_0_1() { return cToDoorVARNAMETerminalRuleCall_4_0_1; }
	}
	public class DangerousConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.DangerousCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOnRoomCrossReference_2_0 = (CrossReference)cOnAssignment_2.eContents().get(0);
		private final RuleCall cOnRoomVARNAMETerminalRuleCall_2_0_1 = (RuleCall)cOnRoomCrossReference_2_0.eContents().get(1);
		private final Assignment cAmountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountINTTerminalRuleCall_3_0 = (RuleCall)cAmountAssignment_3.eContents().get(0);
		
		//DangerousCondition:
		//	'Condition' 'on' on=[Room|VARNAME] amount=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' 'on' on=[Room|VARNAME] amount=INT
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//on=[Room|VARNAME]
		public Assignment getOnAssignment_2() { return cOnAssignment_2; }
		
		//[Room|VARNAME]
		public CrossReference getOnRoomCrossReference_2_0() { return cOnRoomCrossReference_2_0; }
		
		//VARNAME
		public RuleCall getOnRoomVARNAMETerminalRuleCall_2_0_1() { return cOnRoomVARNAMETerminalRuleCall_2_0_1; }
		
		//amount=INT
		public Assignment getAmountAssignment_3() { return cAmountAssignment_3; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_3_0() { return cAmountINTTerminalRuleCall_3_0; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Coordinate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinate:
		//	'(' x=INT ',' y=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromCoordinateParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToCoordinateParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWithoutAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_1_0 = (RuleCall)cWithoutAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cWithoutAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_2_1_0 = (RuleCall)cWithoutAssignment_4_2_1.eContents().get(0);
		
		//Area:
		//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//from=Coordinate
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_1_0() { return cFromCoordinateParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//to=Coordinate
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_3_0() { return cToCoordinateParserRuleCall_3_0; }
		
		//('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'without'
		public Keyword getWithoutKeyword_4_0() { return cWithoutKeyword_4_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_1() { return cWithoutAssignment_4_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_1_0() { return cWithoutCoordinateParserRuleCall_4_1_0; }
		
		//(',' without+=Coordinate)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_2_1() { return cWithoutAssignment_4_2_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_2_1_0() { return cWithoutCoordinateParserRuleCall_4_2_1_0; }
	}
	
	public class PerceptionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Perception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cATTENTIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cATTENTIVEAttentiveKeyword_0_0 = (Keyword)cATTENTIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRELAXEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRELAXEDRelaxedKeyword_1_0 = (Keyword)cRELAXEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOPTIMISTICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOPTIMISTICOptimisticKeyword_2_0 = (Keyword)cOPTIMISTICEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSCEPTICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSCEPTICScepticKeyword_3_0 = (Keyword)cSCEPTICEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Perception:
		//	ATTENTIVE='attentive' | RELAXED='relaxed' |
		//	OPTIMISTIC='optimistic' | SCEPTIC='sceptic';
		public EnumRule getRule() { return rule; }
		
		//ATTENTIVE='attentive' | RELAXED='relaxed' | OPTIMISTIC='optimistic' | SCEPTIC='sceptic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ATTENTIVE='attentive'
		public EnumLiteralDeclaration getATTENTIVEEnumLiteralDeclaration_0() { return cATTENTIVEEnumLiteralDeclaration_0; }
		
		//'attentive'
		public Keyword getATTENTIVEAttentiveKeyword_0_0() { return cATTENTIVEAttentiveKeyword_0_0; }
		
		//RELAXED='relaxed'
		public EnumLiteralDeclaration getRELAXEDEnumLiteralDeclaration_1() { return cRELAXEDEnumLiteralDeclaration_1; }
		
		//'relaxed'
		public Keyword getRELAXEDRelaxedKeyword_1_0() { return cRELAXEDRelaxedKeyword_1_0; }
		
		//OPTIMISTIC='optimistic'
		public EnumLiteralDeclaration getOPTIMISTICEnumLiteralDeclaration_2() { return cOPTIMISTICEnumLiteralDeclaration_2; }
		
		//'optimistic'
		public Keyword getOPTIMISTICOptimisticKeyword_2_0() { return cOPTIMISTICOptimisticKeyword_2_0; }
		
		//SCEPTIC='sceptic'
		public EnumLiteralDeclaration getSCEPTICEnumLiteralDeclaration_3() { return cSCEPTICEnumLiteralDeclaration_3; }
		
		//'sceptic'
		public Keyword getSCEPTICScepticKeyword_3_0() { return cSCEPTICScepticKeyword_3_0; }
	}
	public class ActionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEWCOMEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEWCOMERNewcomerKeyword_0_0 = (Keyword)cNEWCOMEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXPERIENCEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXPERIENCEDExperiencedKeyword_1_0 = (Keyword)cEXPERIENCEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPANICEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPANICPanicKeyword_2_0 = (Keyword)cPANICEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Action:
		//	NEWCOMER='newcomer' | EXPERIENCED='experienced' | PANIC='panic';
		public EnumRule getRule() { return rule; }
		
		//NEWCOMER='newcomer' | EXPERIENCED='experienced' | PANIC='panic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEWCOMER='newcomer'
		public EnumLiteralDeclaration getNEWCOMEREnumLiteralDeclaration_0() { return cNEWCOMEREnumLiteralDeclaration_0; }
		
		//'newcomer'
		public Keyword getNEWCOMERNewcomerKeyword_0_0() { return cNEWCOMERNewcomerKeyword_0_0; }
		
		//EXPERIENCED='experienced'
		public EnumLiteralDeclaration getEXPERIENCEDEnumLiteralDeclaration_1() { return cEXPERIENCEDEnumLiteralDeclaration_1; }
		
		//'experienced'
		public Keyword getEXPERIENCEDExperiencedKeyword_1_0() { return cEXPERIENCEDExperiencedKeyword_1_0; }
		
		//PANIC='panic'
		public EnumLiteralDeclaration getPANICEnumLiteralDeclaration_2() { return cPANICEnumLiteralDeclaration_2; }
		
		//'panic'
		public Keyword getPANICPanicKeyword_2_0() { return cPANICPanicKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final FloorplanElements pFloorplan;
	private final RoomElements pRoom;
	private final DoorElements pDoor;
	private final PerceptionElements ePerception;
	private final ActionElements eAction;
	private final PersonElements pPerson;
	private final ExitElements pExit;
	private final EmergencySignElements pEmergencySign;
	private final DangerousConditionElements pDangerousCondition;
	private final CoordinateElements pCoordinate;
	private final AreaElements pArea;
	private final TerminalRule tVARNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BmodGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFloorplan = new FloorplanElements();
		this.pRoom = new RoomElements();
		this.pDoor = new DoorElements();
		this.ePerception = new PerceptionElements();
		this.eAction = new ActionElements();
		this.pPerson = new PersonElements();
		this.pExit = new ExitElements();
		this.pEmergencySign = new EmergencySignElements();
		this.pDangerousCondition = new DangerousConditionElements();
		this.pCoordinate = new CoordinateElements();
		this.pArea = new AreaElements();
		this.tVARNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.VARNAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.bmod.Bmod".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Floorplan;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Floorplan:
	//	{Floorplan} (rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | signs+=EmergencySign |
	//	dancons+=DangerousCondition)*;
	public FloorplanElements getFloorplanAccess() {
		return pFloorplan;
	}
	
	public ParserRule getFloorplanRule() {
		return getFloorplanAccess().getRule();
	}
	
	//Room:
	//	'Room' name=VARNAME 'named' named=STRING
	//	areas+=Area ('and' areas+=Area)*;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Door:
	//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
	public DoorElements getDoorAccess() {
		return pDoor;
	}
	
	public ParserRule getDoorRule() {
		return getDoorAccess().getRule();
	}
	
	//enum Perception:
	//	ATTENTIVE='attentive' | RELAXED='relaxed' |
	//	OPTIMISTIC='optimistic' | SCEPTIC='sceptic';
	public PerceptionElements getPerceptionAccess() {
		return ePerception;
	}
	
	public EnumRule getPerceptionRule() {
		return getPerceptionAccess().getRule();
	}
	
	//enum Action:
	//	NEWCOMER='newcomer' | EXPERIENCED='experienced' | PANIC='panic';
	public ActionElements getActionAccess() {
		return eAction;
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Person:
	//	'Person' name=VARNAME 'named' named=STRING 'in' location=Coordinate ':' (perception=Perception ',' action=Action |
	//	action=Action ',' perception=Perception);
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Exit:
	//	'Exit' 'in' location=Coordinate;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//EmergencySign:
	//	'Sign' 'on' on=[Door|VARNAME] 'to' to=[Door|VARNAME];
	public EmergencySignElements getEmergencySignAccess() {
		return pEmergencySign;
	}
	
	public ParserRule getEmergencySignRule() {
		return getEmergencySignAccess().getRule();
	}
	
	//DangerousCondition:
	//	'Condition' 'on' on=[Room|VARNAME] amount=INT;
	public DangerousConditionElements getDangerousConditionAccess() {
		return pDangerousCondition;
	}
	
	public ParserRule getDangerousConditionRule() {
		return getDangerousConditionAccess().getRule();
	}
	
	//Coordinate:
	//	'(' x=INT ',' y=INT ')';
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//Area:
	//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//terminal VARNAME:
	//	ID;
	public TerminalRule getVARNAMERule() {
		return tVARNAME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
