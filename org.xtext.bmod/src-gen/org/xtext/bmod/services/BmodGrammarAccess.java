/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BmodGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Model");
		private final RuleCall cFloorplanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Floorplan;
		@Override public ParserRule getRule() { return rule; }
		
		//Floorplan
		public RuleCall getFloorplanParserRuleCall() { return cFloorplanParserRuleCall; }
	}
	public class FloorplanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Floorplan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloorplanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPerceptionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPerceptionsPerceptionLevelParserRuleCall_1_0_0 = (RuleCall)cPerceptionsAssignment_1_0.eContents().get(0);
		private final Assignment cActionsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cActionsActionProfileParserRuleCall_1_1_0 = (RuleCall)cActionsAssignment_1_1.eContents().get(0);
		private final Assignment cRoomsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cRoomsRoomParserRuleCall_1_2_0 = (RuleCall)cRoomsAssignment_1_2.eContents().get(0);
		private final Assignment cDoorsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cDoorsDoorParserRuleCall_1_3_0 = (RuleCall)cDoorsAssignment_1_3.eContents().get(0);
		private final Assignment cPersonsAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cPersonsPersonParserRuleCall_1_4_0 = (RuleCall)cPersonsAssignment_1_4.eContents().get(0);
		private final Assignment cExitsAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cExitsExitParserRuleCall_1_5_0 = (RuleCall)cExitsAssignment_1_5.eContents().get(0);
		private final Assignment cFiresAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cFiresFireParserRuleCall_1_6_0 = (RuleCall)cFiresAssignment_1_6.eContents().get(0);
		private final Assignment cSignsAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cSignsEmergencySignParserRuleCall_1_7_0 = (RuleCall)cSignsAssignment_1_7.eContents().get(0);
		private final Assignment cDanconsAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cDanconsDangerousConditionParserRuleCall_1_8_0 = (RuleCall)cDanconsAssignment_1_8.eContents().get(0);
		
		//Floorplan:
		//	{Floorplan} (perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person |
		//	exits+=Exit | fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Floorplan} (perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person |
		//exits+=Exit | fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*
		public Group getGroup() { return cGroup; }
		
		//{Floorplan}
		public Action getFloorplanAction_0() { return cFloorplanAction_0; }
		
		//(perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person | exits+=Exit |
		//fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//perceptions+=PerceptionLevel
		public Assignment getPerceptionsAssignment_1_0() { return cPerceptionsAssignment_1_0; }
		
		//PerceptionLevel
		public RuleCall getPerceptionsPerceptionLevelParserRuleCall_1_0_0() { return cPerceptionsPerceptionLevelParserRuleCall_1_0_0; }
		
		//actions+=ActionProfile
		public Assignment getActionsAssignment_1_1() { return cActionsAssignment_1_1; }
		
		//ActionProfile
		public RuleCall getActionsActionProfileParserRuleCall_1_1_0() { return cActionsActionProfileParserRuleCall_1_1_0; }
		
		//rooms+=Room
		public Assignment getRoomsAssignment_1_2() { return cRoomsAssignment_1_2; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_1_2_0() { return cRoomsRoomParserRuleCall_1_2_0; }
		
		//doors+=Door
		public Assignment getDoorsAssignment_1_3() { return cDoorsAssignment_1_3; }
		
		//Door
		public RuleCall getDoorsDoorParserRuleCall_1_3_0() { return cDoorsDoorParserRuleCall_1_3_0; }
		
		//persons+=Person
		public Assignment getPersonsAssignment_1_4() { return cPersonsAssignment_1_4; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_1_4_0() { return cPersonsPersonParserRuleCall_1_4_0; }
		
		//exits+=Exit
		public Assignment getExitsAssignment_1_5() { return cExitsAssignment_1_5; }
		
		//Exit
		public RuleCall getExitsExitParserRuleCall_1_5_0() { return cExitsExitParserRuleCall_1_5_0; }
		
		//fires+=Fire
		public Assignment getFiresAssignment_1_6() { return cFiresAssignment_1_6; }
		
		//Fire
		public RuleCall getFiresFireParserRuleCall_1_6_0() { return cFiresFireParserRuleCall_1_6_0; }
		
		//signs+=EmergencySign
		public Assignment getSignsAssignment_1_7() { return cSignsAssignment_1_7; }
		
		//EmergencySign
		public RuleCall getSignsEmergencySignParserRuleCall_1_7_0() { return cSignsEmergencySignParserRuleCall_1_7_0; }
		
		//dancons+=DangerousCondition
		public Assignment getDanconsAssignment_1_8() { return cDanconsAssignment_1_8; }
		
		//DangerousCondition
		public RuleCall getDanconsDangerousConditionParserRuleCall_1_8_0() { return cDanconsDangerousConditionParserRuleCall_1_8_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAreasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAreasAreaParserRuleCall_2_0 = (RuleCall)cAreasAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAreasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAreasAreaParserRuleCall_3_1_0 = (RuleCall)cAreasAssignment_3_1.eContents().get(0);
		
		//Room:
		//	'Room' name=VARNAME
		//	areas+=Area ('and' areas+=Area)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' name=VARNAME areas+=Area ('and' areas+=Area)*
		public Group getGroup() { return cGroup; }
		
		//'Room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//areas+=Area
		public Assignment getAreasAssignment_2() { return cAreasAssignment_2; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_2_0() { return cAreasAreaParserRuleCall_2_0; }
		
		//('and' areas+=Area)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//areas+=Area
		public Assignment getAreasAssignment_3_1() { return cAreasAssignment_3_1; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_3_1_0() { return cAreasAreaParserRuleCall_3_1_0; }
	}
	public class DoorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Door");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromCoordinateParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToCoordinateParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		
		//Door:
		//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Door'
		public Keyword getDoorKeyword_0() { return cDoorKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=Coordinate
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_3_0() { return cFromCoordinateParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=Coordinate
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_5_0() { return cToCoordinateParserRuleCall_5_0; }
	}
	public class PerceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Perception");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExistingAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExistingPerceptionEnumEnumRuleCall_0_0 = (RuleCall)cExistingAssignment_0.eContents().get(0);
		private final Assignment cCustomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomPerceptionLevelCrossReference_1_0 = (CrossReference)cCustomAssignment_1.eContents().get(0);
		private final RuleCall cCustomPerceptionLevelVARNAMETerminalRuleCall_1_0_1 = (RuleCall)cCustomPerceptionLevelCrossReference_1_0.eContents().get(1);
		
		//Perception:
		//	existing=PerceptionEnum | custom=[PerceptionLevel|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//existing=PerceptionEnum | custom=[PerceptionLevel|VARNAME]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//existing=PerceptionEnum
		public Assignment getExistingAssignment_0() { return cExistingAssignment_0; }
		
		//PerceptionEnum
		public RuleCall getExistingPerceptionEnumEnumRuleCall_0_0() { return cExistingPerceptionEnumEnumRuleCall_0_0; }
		
		//custom=[PerceptionLevel|VARNAME]
		public Assignment getCustomAssignment_1() { return cCustomAssignment_1; }
		
		//[PerceptionLevel|VARNAME]
		public CrossReference getCustomPerceptionLevelCrossReference_1_0() { return cCustomPerceptionLevelCrossReference_1_0; }
		
		//VARNAME
		public RuleCall getCustomPerceptionLevelVARNAMETerminalRuleCall_1_0_1() { return cCustomPerceptionLevelVARNAMETerminalRuleCall_1_0_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExistingAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExistingActionEnumEnumRuleCall_0_0 = (RuleCall)cExistingAssignment_0.eContents().get(0);
		private final Assignment cCustomAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cCustomActionProfileCrossReference_1_0 = (CrossReference)cCustomAssignment_1.eContents().get(0);
		private final RuleCall cCustomActionProfileVARNAMETerminalRuleCall_1_0_1 = (RuleCall)cCustomActionProfileCrossReference_1_0.eContents().get(1);
		
		//Action:
		//	existing=ActionEnum | custom=[ActionProfile|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//existing=ActionEnum | custom=[ActionProfile|VARNAME]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//existing=ActionEnum
		public Assignment getExistingAssignment_0() { return cExistingAssignment_0; }
		
		//ActionEnum
		public RuleCall getExistingActionEnumEnumRuleCall_0_0() { return cExistingActionEnumEnumRuleCall_0_0; }
		
		//custom=[ActionProfile|VARNAME]
		public Assignment getCustomAssignment_1() { return cCustomAssignment_1; }
		
		//[ActionProfile|VARNAME]
		public CrossReference getCustomActionProfileCrossReference_1_0() { return cCustomActionProfileCrossReference_1_0; }
		
		//VARNAME
		public RuleCall getCustomActionProfileVARNAMETerminalRuleCall_1_0_1() { return cCustomActionProfileVARNAMETerminalRuleCall_1_0_1; }
	}
	public class PerceptionLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.PerceptionLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPerceptionLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//PerceptionLevel:
		//	'PerceptionLevel' name=VARNAME;
		@Override public ParserRule getRule() { return rule; }
		
		//'PerceptionLevel' name=VARNAME
		public Group getGroup() { return cGroup; }
		
		//'PerceptionLevel'
		public Keyword getPerceptionLevelKeyword_0() { return cPerceptionLevelKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
	}
	public class ActionProfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.ActionProfile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionProfileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ActionProfile:
		//	'ActionProfile' name=VARNAME;
		@Override public ParserRule getRule() { return rule; }
		
		//'ActionProfile' name=VARNAME
		public Group getGroup() { return cGroup; }
		
		//'ActionProfile'
		public Keyword getActionProfileKeyword_0() { return cActionProfileKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationCoordinateParserRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPerceptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPerceptionPerceptionParserRuleCall_5_0 = (RuleCall)cPerceptionAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cActionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionActionParserRuleCall_7_0 = (RuleCall)cActionAssignment_7.eContents().get(0);
		
		//Person:
		//	'Person' name=VARNAME 'in' location=Coordinate ':'
		//	perception=Perception ',' action=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//'Person' name=VARNAME 'in' location=Coordinate ':' perception=Perception ',' action=Action
		public Group getGroup() { return cGroup; }
		
		//'Person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_3_0() { return cLocationCoordinateParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//perception=Perception
		public Assignment getPerceptionAssignment_5() { return cPerceptionAssignment_5; }
		
		//Perception
		public RuleCall getPerceptionPerceptionParserRuleCall_5_0() { return cPerceptionPerceptionParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//action=Action
		public Assignment getActionAssignment_7() { return cActionAssignment_7; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_7_0() { return cActionActionParserRuleCall_7_0; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationCoordinateParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//Exit:
		//	'Exit' 'in' location=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Exit' 'in' location=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Exit'
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_2_0() { return cLocationCoordinateParserRuleCall_2_0; }
	}
	public class FireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Fire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationCoordinateParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//Fire:
		//	'Fire' 'in' location=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fire' 'in' location=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Fire'
		public Keyword getFireKeyword_0() { return cFireKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_2_0() { return cLocationCoordinateParserRuleCall_2_0; }
	}
	public class EmergencySignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.EmergencySign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOnDoorCrossReference_2_0 = (CrossReference)cOnAssignment_2.eContents().get(0);
		private final RuleCall cOnDoorVARNAMETerminalRuleCall_2_0_1 = (RuleCall)cOnDoorCrossReference_2_0.eContents().get(1);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToDoorRefParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		
		//EmergencySign:
		//	'Sign' 'on' on=[Door|VARNAME] to=DoorRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sign' 'on' on=[Door|VARNAME] to=DoorRef
		public Group getGroup() { return cGroup; }
		
		//'Sign'
		public Keyword getSignKeyword_0() { return cSignKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//on=[Door|VARNAME]
		public Assignment getOnAssignment_2() { return cOnAssignment_2; }
		
		//[Door|VARNAME]
		public CrossReference getOnDoorCrossReference_2_0() { return cOnDoorCrossReference_2_0; }
		
		//VARNAME
		public RuleCall getOnDoorVARNAMETerminalRuleCall_2_0_1() { return cOnDoorVARNAMETerminalRuleCall_2_0_1; }
		
		//to=DoorRef
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//DoorRef
		public RuleCall getToDoorRefParserRuleCall_3_0() { return cToDoorRefParserRuleCall_3_0; }
	}
	public class DoorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.DoorRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefDoorCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefDoorVARNAMETerminalRuleCall_1_0_1 = (RuleCall)cRefDoorCrossReference_1_0.eContents().get(1);
		
		//DoorRef:
		//	'to' ref=[Door|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//'to' ref=[Door|VARNAME]
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//ref=[Door|VARNAME]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[Door|VARNAME]
		public CrossReference getRefDoorCrossReference_1_0() { return cRefDoorCrossReference_1_0; }
		
		//VARNAME
		public RuleCall getRefDoorVARNAMETerminalRuleCall_1_0_1() { return cRefDoorVARNAMETerminalRuleCall_1_0_1; }
	}
	public class DangerousConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.DangerousCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOnRoomCrossReference_2_0 = (CrossReference)cOnAssignment_2.eContents().get(0);
		private final RuleCall cOnRoomVARNAMETerminalRuleCall_2_0_1 = (RuleCall)cOnRoomCrossReference_2_0.eContents().get(1);
		private final Assignment cAmountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountINTTerminalRuleCall_3_0 = (RuleCall)cAmountAssignment_3.eContents().get(0);
		
		//DangerousCondition:
		//	'Condition' 'on' on=[Room|VARNAME] amount=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'Condition' 'on' on=[Room|VARNAME] amount=INT
		public Group getGroup() { return cGroup; }
		
		//'Condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//on=[Room|VARNAME]
		public Assignment getOnAssignment_2() { return cOnAssignment_2; }
		
		//[Room|VARNAME]
		public CrossReference getOnRoomCrossReference_2_0() { return cOnRoomCrossReference_2_0; }
		
		//VARNAME
		public RuleCall getOnRoomVARNAMETerminalRuleCall_2_0_1() { return cOnRoomVARNAMETerminalRuleCall_2_0_1; }
		
		//amount=INT
		public Assignment getAmountAssignment_3() { return cAmountAssignment_3; }
		
		//INT
		public RuleCall getAmountINTTerminalRuleCall_3_0() { return cAmountINTTerminalRuleCall_3_0; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Coordinate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinate:
		//	'(' x=INT ',' y=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromCoordinateParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToCoordinateParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWithoutAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_1_0 = (RuleCall)cWithoutAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cWithoutAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_2_1_0 = (RuleCall)cWithoutAssignment_4_2_1.eContents().get(0);
		
		//Area:
		//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//from=Coordinate
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_1_0() { return cFromCoordinateParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//to=Coordinate
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_3_0() { return cToCoordinateParserRuleCall_3_0; }
		
		//('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'without'
		public Keyword getWithoutKeyword_4_0() { return cWithoutKeyword_4_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_1() { return cWithoutAssignment_4_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_1_0() { return cWithoutCoordinateParserRuleCall_4_1_0; }
		
		//(',' without+=Coordinate)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_2_1() { return cWithoutAssignment_4_2_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_2_1_0() { return cWithoutCoordinateParserRuleCall_4_2_1_0; }
	}
	
	public class PerceptionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.PerceptionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAttentiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAttentiveAttentiveKeyword_0_0 = (Keyword)cAttentiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRelaxedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRelaxedRelaxedKeyword_1_0 = (Keyword)cRelaxedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOptimisticEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOptimisticOptimisticKeyword_2_0 = (Keyword)cOptimisticEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cScepticEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cScepticScepticKeyword_3_0 = (Keyword)cScepticEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PerceptionEnum:
		//	attentive | relaxed |
		//	optimistic | sceptic;
		public EnumRule getRule() { return rule; }
		
		//attentive | relaxed | optimistic | sceptic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attentive
		public EnumLiteralDeclaration getAttentiveEnumLiteralDeclaration_0() { return cAttentiveEnumLiteralDeclaration_0; }
		
		//'attentive'
		public Keyword getAttentiveAttentiveKeyword_0_0() { return cAttentiveAttentiveKeyword_0_0; }
		
		//relaxed
		public EnumLiteralDeclaration getRelaxedEnumLiteralDeclaration_1() { return cRelaxedEnumLiteralDeclaration_1; }
		
		//'relaxed'
		public Keyword getRelaxedRelaxedKeyword_1_0() { return cRelaxedRelaxedKeyword_1_0; }
		
		//optimistic
		public EnumLiteralDeclaration getOptimisticEnumLiteralDeclaration_2() { return cOptimisticEnumLiteralDeclaration_2; }
		
		//'optimistic'
		public Keyword getOptimisticOptimisticKeyword_2_0() { return cOptimisticOptimisticKeyword_2_0; }
		
		//sceptic
		public EnumLiteralDeclaration getScepticEnumLiteralDeclaration_3() { return cScepticEnumLiteralDeclaration_3; }
		
		//'sceptic'
		public Keyword getScepticScepticKeyword_3_0() { return cScepticScepticKeyword_3_0; }
	}
	public class ActionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.ActionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNewcomerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNewcomerNewcomerKeyword_0_0 = (Keyword)cNewcomerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExperiencedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExperiencedExperiencedKeyword_1_0 = (Keyword)cExperiencedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPanicEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPanicPanicKeyword_2_0 = (Keyword)cPanicEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ActionEnum:
		//	newcomer | experienced | panic;
		public EnumRule getRule() { return rule; }
		
		//newcomer | experienced | panic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//newcomer
		public EnumLiteralDeclaration getNewcomerEnumLiteralDeclaration_0() { return cNewcomerEnumLiteralDeclaration_0; }
		
		//'newcomer'
		public Keyword getNewcomerNewcomerKeyword_0_0() { return cNewcomerNewcomerKeyword_0_0; }
		
		//experienced
		public EnumLiteralDeclaration getExperiencedEnumLiteralDeclaration_1() { return cExperiencedEnumLiteralDeclaration_1; }
		
		//'experienced'
		public Keyword getExperiencedExperiencedKeyword_1_0() { return cExperiencedExperiencedKeyword_1_0; }
		
		//panic
		public EnumLiteralDeclaration getPanicEnumLiteralDeclaration_2() { return cPanicEnumLiteralDeclaration_2; }
		
		//'panic'
		public Keyword getPanicPanicKeyword_2_0() { return cPanicPanicKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final FloorplanElements pFloorplan;
	private final RoomElements pRoom;
	private final DoorElements pDoor;
	private final PerceptionElements pPerception;
	private final ActionElements pAction;
	private final PerceptionEnumElements ePerceptionEnum;
	private final ActionEnumElements eActionEnum;
	private final PerceptionLevelElements pPerceptionLevel;
	private final ActionProfileElements pActionProfile;
	private final PersonElements pPerson;
	private final ExitElements pExit;
	private final FireElements pFire;
	private final EmergencySignElements pEmergencySign;
	private final DoorRefElements pDoorRef;
	private final DangerousConditionElements pDangerousCondition;
	private final CoordinateElements pCoordinate;
	private final AreaElements pArea;
	private final TerminalRule tVARNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BmodGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFloorplan = new FloorplanElements();
		this.pRoom = new RoomElements();
		this.pDoor = new DoorElements();
		this.pPerception = new PerceptionElements();
		this.pAction = new ActionElements();
		this.ePerceptionEnum = new PerceptionEnumElements();
		this.eActionEnum = new ActionEnumElements();
		this.pPerceptionLevel = new PerceptionLevelElements();
		this.pActionProfile = new ActionProfileElements();
		this.pPerson = new PersonElements();
		this.pExit = new ExitElements();
		this.pFire = new FireElements();
		this.pEmergencySign = new EmergencySignElements();
		this.pDoorRef = new DoorRefElements();
		this.pDangerousCondition = new DangerousConditionElements();
		this.pCoordinate = new CoordinateElements();
		this.pArea = new AreaElements();
		this.tVARNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.VARNAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.bmod.Bmod".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Floorplan;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Floorplan:
	//	{Floorplan} (perceptions+=PerceptionLevel | actions+=ActionProfile | rooms+=Room | doors+=Door | persons+=Person |
	//	exits+=Exit | fires+=Fire | signs+=EmergencySign | dancons+=DangerousCondition)*;
	public FloorplanElements getFloorplanAccess() {
		return pFloorplan;
	}
	
	public ParserRule getFloorplanRule() {
		return getFloorplanAccess().getRule();
	}
	
	//Room:
	//	'Room' name=VARNAME
	//	areas+=Area ('and' areas+=Area)*;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Door:
	//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
	public DoorElements getDoorAccess() {
		return pDoor;
	}
	
	public ParserRule getDoorRule() {
		return getDoorAccess().getRule();
	}
	
	//Perception:
	//	existing=PerceptionEnum | custom=[PerceptionLevel|VARNAME];
	public PerceptionElements getPerceptionAccess() {
		return pPerception;
	}
	
	public ParserRule getPerceptionRule() {
		return getPerceptionAccess().getRule();
	}
	
	//Action:
	//	existing=ActionEnum | custom=[ActionProfile|VARNAME];
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//enum PerceptionEnum:
	//	attentive | relaxed |
	//	optimistic | sceptic;
	public PerceptionEnumElements getPerceptionEnumAccess() {
		return ePerceptionEnum;
	}
	
	public EnumRule getPerceptionEnumRule() {
		return getPerceptionEnumAccess().getRule();
	}
	
	//enum ActionEnum:
	//	newcomer | experienced | panic;
	public ActionEnumElements getActionEnumAccess() {
		return eActionEnum;
	}
	
	public EnumRule getActionEnumRule() {
		return getActionEnumAccess().getRule();
	}
	
	//PerceptionLevel:
	//	'PerceptionLevel' name=VARNAME;
	public PerceptionLevelElements getPerceptionLevelAccess() {
		return pPerceptionLevel;
	}
	
	public ParserRule getPerceptionLevelRule() {
		return getPerceptionLevelAccess().getRule();
	}
	
	//ActionProfile:
	//	'ActionProfile' name=VARNAME;
	public ActionProfileElements getActionProfileAccess() {
		return pActionProfile;
	}
	
	public ParserRule getActionProfileRule() {
		return getActionProfileAccess().getRule();
	}
	
	//Person:
	//	'Person' name=VARNAME 'in' location=Coordinate ':'
	//	perception=Perception ',' action=Action;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Exit:
	//	'Exit' 'in' location=Coordinate;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//Fire:
	//	'Fire' 'in' location=Coordinate;
	public FireElements getFireAccess() {
		return pFire;
	}
	
	public ParserRule getFireRule() {
		return getFireAccess().getRule();
	}
	
	//EmergencySign:
	//	'Sign' 'on' on=[Door|VARNAME] to=DoorRef;
	public EmergencySignElements getEmergencySignAccess() {
		return pEmergencySign;
	}
	
	public ParserRule getEmergencySignRule() {
		return getEmergencySignAccess().getRule();
	}
	
	//DoorRef:
	//	'to' ref=[Door|VARNAME];
	public DoorRefElements getDoorRefAccess() {
		return pDoorRef;
	}
	
	public ParserRule getDoorRefRule() {
		return getDoorRefAccess().getRule();
	}
	
	//DangerousCondition:
	//	'Condition' 'on' on=[Room|VARNAME] amount=INT;
	public DangerousConditionElements getDangerousConditionAccess() {
		return pDangerousCondition;
	}
	
	public ParserRule getDangerousConditionRule() {
		return getDangerousConditionAccess().getRule();
	}
	
	//Coordinate:
	//	'(' x=INT ',' y=INT ')';
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//Area:
	//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//terminal VARNAME:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getVARNAMERule() {
		return tVARNAME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
