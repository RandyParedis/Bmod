/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BmodGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Model");
		private final RuleCall cFloorplanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	Floorplan;
		@Override public ParserRule getRule() { return rule; }
		
		//Floorplan
		public RuleCall getFloorplanParserRuleCall() { return cFloorplanParserRuleCall; }
	}
	public class FloorplanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Floorplan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloorplanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRoomsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRoomsRoomParserRuleCall_2_0_0 = (RuleCall)cRoomsAssignment_2_0.eContents().get(0);
		private final Assignment cDoorsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDoorsDoorParserRuleCall_2_1_0 = (RuleCall)cDoorsAssignment_2_1.eContents().get(0);
		private final Assignment cPersonsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cPersonsPersonParserRuleCall_2_2_0 = (RuleCall)cPersonsAssignment_2_2.eContents().get(0);
		private final Assignment cExitsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cExitsExitParserRuleCall_2_3_0 = (RuleCall)cExitsAssignment_2_3.eContents().get(0);
		private final Assignment cFiresAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cFiresFireParserRuleCall_2_4_0 = (RuleCall)cFiresAssignment_2_4.eContents().get(0);
		private final Assignment cSignsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cSignsEmergencySignParserRuleCall_2_5_0 = (RuleCall)cSignsAssignment_2_5.eContents().get(0);
		
		//Floorplan:
		//	{Floorplan} imports+=Import* (rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | fires+=Fire |
		//	signs+=EmergencySign)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Floorplan} imports+=Import* (rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | fires+=Fire |
		//signs+=EmergencySign)*
		public Group getGroup() { return cGroup; }
		
		//{Floorplan}
		public Action getFloorplanAction_0() { return cFloorplanAction_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//(rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | fires+=Fire | signs+=EmergencySign)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//rooms+=Room
		public Assignment getRoomsAssignment_2_0() { return cRoomsAssignment_2_0; }
		
		//Room
		public RuleCall getRoomsRoomParserRuleCall_2_0_0() { return cRoomsRoomParserRuleCall_2_0_0; }
		
		//doors+=Door
		public Assignment getDoorsAssignment_2_1() { return cDoorsAssignment_2_1; }
		
		//Door
		public RuleCall getDoorsDoorParserRuleCall_2_1_0() { return cDoorsDoorParserRuleCall_2_1_0; }
		
		//persons+=Person
		public Assignment getPersonsAssignment_2_2() { return cPersonsAssignment_2_2; }
		
		//Person
		public RuleCall getPersonsPersonParserRuleCall_2_2_0() { return cPersonsPersonParserRuleCall_2_2_0; }
		
		//exits+=Exit
		public Assignment getExitsAssignment_2_3() { return cExitsAssignment_2_3; }
		
		//Exit
		public RuleCall getExitsExitParserRuleCall_2_3_0() { return cExitsExitParserRuleCall_2_3_0; }
		
		//fires+=Fire
		public Assignment getFiresAssignment_2_4() { return cFiresAssignment_2_4; }
		
		//Fire
		public RuleCall getFiresFireParserRuleCall_2_4_0() { return cFiresFireParserRuleCall_2_4_0; }
		
		//signs+=EmergencySign
		public Assignment getSignsAssignment_2_5() { return cSignsAssignment_2_5; }
		
		//EmergencySign
		public RuleCall getSignsEmergencySignParserRuleCall_2_5_0() { return cSignsEmergencySignParserRuleCall_2_5_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importURI=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cHasCapacityAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cHasCapacityLeftSquareBracketKeyword_2_0_0 = (Keyword)cHasCapacityAssignment_2_0.eContents().get(0);
		private final Assignment cCapacityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCapacityINTTerminalRuleCall_2_1_0 = (RuleCall)cCapacityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cAreasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAreasAreaParserRuleCall_3_0 = (RuleCall)cAreasAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAndKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAreasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAreasAreaParserRuleCall_4_1_0 = (RuleCall)cAreasAssignment_4_1.eContents().get(0);
		
		//Room:
		//	'Room' name=VARNAME (hasCapacity?='[' capacity=INT ']')?
		//	areas+=Area ('and' areas+=Area)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' name=VARNAME (hasCapacity?='[' capacity=INT ']')? areas+=Area ('and' areas+=Area)*
		public Group getGroup() { return cGroup; }
		
		//'Room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//(hasCapacity?='[' capacity=INT ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//hasCapacity?='['
		public Assignment getHasCapacityAssignment_2_0() { return cHasCapacityAssignment_2_0; }
		
		//'['
		public Keyword getHasCapacityLeftSquareBracketKeyword_2_0_0() { return cHasCapacityLeftSquareBracketKeyword_2_0_0; }
		
		//capacity=INT
		public Assignment getCapacityAssignment_2_1() { return cCapacityAssignment_2_1; }
		
		//INT
		public RuleCall getCapacityINTTerminalRuleCall_2_1_0() { return cCapacityINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//areas+=Area
		public Assignment getAreasAssignment_3() { return cAreasAssignment_3; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_3_0() { return cAreasAreaParserRuleCall_3_0; }
		
		//('and' areas+=Area)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'and'
		public Keyword getAndKeyword_4_0() { return cAndKeyword_4_0; }
		
		//areas+=Area
		public Assignment getAreasAssignment_4_1() { return cAreasAssignment_4_1; }
		
		//Area
		public RuleCall getAreasAreaParserRuleCall_4_1_0() { return cAreasAreaParserRuleCall_4_1_0; }
	}
	public class DoorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Door");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromCoordinateParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToCoordinateParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		
		//Door:
		//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Door'
		public Keyword getDoorKeyword_0() { return cDoorKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=Coordinate
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_3_0() { return cFromCoordinateParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=Coordinate
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_5_0() { return cToCoordinateParserRuleCall_5_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVARNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationCoordinateParserRuleCall_3_0 = (RuleCall)cLocationAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cActionActionDescCrossReference_5_0 = (CrossReference)cActionAssignment_5.eContents().get(0);
		private final RuleCall cActionActionDescVARNAMETerminalRuleCall_5_0_1 = (RuleCall)cActionActionDescCrossReference_5_0.eContents().get(1);
		
		//Person:
		//	'Person' name=VARNAME 'in' location=Coordinate ':' action=[ActionDesc|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//'Person' name=VARNAME 'in' location=Coordinate ':' action=[ActionDesc|VARNAME]
		public Group getGroup() { return cGroup; }
		
		//'Person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=VARNAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VARNAME
		public RuleCall getNameVARNAMETerminalRuleCall_1_0() { return cNameVARNAMETerminalRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_3() { return cLocationAssignment_3; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_3_0() { return cLocationCoordinateParserRuleCall_3_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//action=[ActionDesc|VARNAME]
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//[ActionDesc|VARNAME]
		public CrossReference getActionActionDescCrossReference_5_0() { return cActionActionDescCrossReference_5_0; }
		
		//VARNAME
		public RuleCall getActionActionDescVARNAMETerminalRuleCall_5_0_1() { return cActionActionDescVARNAMETerminalRuleCall_5_0_1; }
	}
	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationCoordinateParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//Exit:
		//	'Exit' 'in' location=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Exit' 'in' location=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Exit'
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_2_0() { return cLocationCoordinateParserRuleCall_2_0; }
	}
	public class FireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Fire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationCoordinateParserRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		
		//Fire:
		//	'Fire' 'in' location=Coordinate;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fire' 'in' location=Coordinate
		public Group getGroup() { return cGroup; }
		
		//'Fire'
		public Keyword getFireKeyword_0() { return cFireKeyword_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//location=Coordinate
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//Coordinate
		public RuleCall getLocationCoordinateParserRuleCall_2_0() { return cLocationCoordinateParserRuleCall_2_0; }
	}
	public class EmergencySignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.EmergencySign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmergencySignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFromDoorCrossReference_2_0 = (CrossReference)cFromAssignment_2.eContents().get(0);
		private final RuleCall cFromDoorVARNAMETerminalRuleCall_2_0_1 = (RuleCall)cFromDoorCrossReference_2_0.eContents().get(1);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefDoorRefParserRuleCall_3_0 = (RuleCall)cRefAssignment_3.eContents().get(0);
		
		//EmergencySign:
		//	'EmergencySign' 'from' from=[Door|VARNAME] ref=DoorRef;
		@Override public ParserRule getRule() { return rule; }
		
		//'EmergencySign' 'from' from=[Door|VARNAME] ref=DoorRef
		public Group getGroup() { return cGroup; }
		
		//'EmergencySign'
		public Keyword getEmergencySignKeyword_0() { return cEmergencySignKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//from=[Door|VARNAME]
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }
		
		//[Door|VARNAME]
		public CrossReference getFromDoorCrossReference_2_0() { return cFromDoorCrossReference_2_0; }
		
		//VARNAME
		public RuleCall getFromDoorVARNAMETerminalRuleCall_2_0_1() { return cFromDoorVARNAMETerminalRuleCall_2_0_1; }
		
		//ref=DoorRef
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }
		
		//DoorRef
		public RuleCall getRefDoorRefParserRuleCall_3_0() { return cRefDoorRefParserRuleCall_3_0; }
	}
	public class DoorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.DoorRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cToAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cToDoorCrossReference_1_0 = (CrossReference)cToAssignment_1.eContents().get(0);
		private final RuleCall cToDoorVARNAMETerminalRuleCall_1_0_1 = (RuleCall)cToDoorCrossReference_1_0.eContents().get(1);
		
		//DoorRef:
		//	'to' to=[Door|VARNAME];
		@Override public ParserRule getRule() { return rule; }
		
		//'to' to=[Door|VARNAME]
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//to=[Door|VARNAME]
		public Assignment getToAssignment_1() { return cToAssignment_1; }
		
		//[Door|VARNAME]
		public CrossReference getToDoorCrossReference_1_0() { return cToDoorCrossReference_1_0; }
		
		//VARNAME
		public RuleCall getToDoorVARNAMETerminalRuleCall_1_0_1() { return cToDoorVARNAMETerminalRuleCall_1_0_1; }
	}
	public class CoordinateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Coordinate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Coordinate:
		//	'(' x=INT ',' y=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//x=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AreaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.Area");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromCoordinateParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToCoordinateParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithoutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWithoutAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_1_0 = (RuleCall)cWithoutAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cWithoutAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cWithoutCoordinateParserRuleCall_4_2_1_0 = (RuleCall)cWithoutAssignment_4_2_1.eContents().get(0);
		
		//Area:
		//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//from=Coordinate
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//Coordinate
		public RuleCall getFromCoordinateParserRuleCall_1_0() { return cFromCoordinateParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//to=Coordinate
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//Coordinate
		public RuleCall getToCoordinateParserRuleCall_3_0() { return cToCoordinateParserRuleCall_3_0; }
		
		//('without' without+=Coordinate (',' without+=Coordinate)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'without'
		public Keyword getWithoutKeyword_4_0() { return cWithoutKeyword_4_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_1() { return cWithoutAssignment_4_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_1_0() { return cWithoutCoordinateParserRuleCall_4_1_0; }
		
		//(',' without+=Coordinate)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//without+=Coordinate
		public Assignment getWithoutAssignment_4_2_1() { return cWithoutAssignment_4_2_1; }
		
		//Coordinate
		public RuleCall getWithoutCoordinateParserRuleCall_4_2_1_0() { return cWithoutCoordinateParserRuleCall_4_2_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final FloorplanElements pFloorplan;
	private final ImportElements pImport;
	private final RoomElements pRoom;
	private final DoorElements pDoor;
	private final PersonElements pPerson;
	private final ExitElements pExit;
	private final FireElements pFire;
	private final EmergencySignElements pEmergencySign;
	private final DoorRefElements pDoorRef;
	private final CoordinateElements pCoordinate;
	private final AreaElements pArea;
	private final TerminalRule tVARNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BmodGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFloorplan = new FloorplanElements();
		this.pImport = new ImportElements();
		this.pRoom = new RoomElements();
		this.pDoor = new DoorElements();
		this.pPerson = new PersonElements();
		this.pExit = new ExitElements();
		this.pFire = new FireElements();
		this.pEmergencySign = new EmergencySignElements();
		this.pDoorRef = new DoorRefElements();
		this.pCoordinate = new CoordinateElements();
		this.pArea = new AreaElements();
		this.tVARNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.bmod.Bmod.VARNAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.bmod.Bmod".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Floorplan;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Floorplan:
	//	{Floorplan} imports+=Import* (rooms+=Room | doors+=Door | persons+=Person | exits+=Exit | fires+=Fire |
	//	signs+=EmergencySign)*;
	public FloorplanElements getFloorplanAccess() {
		return pFloorplan;
	}
	
	public ParserRule getFloorplanRule() {
		return getFloorplanAccess().getRule();
	}
	
	//Import:
	//	'import' importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Room:
	//	'Room' name=VARNAME (hasCapacity?='[' capacity=INT ']')?
	//	areas+=Area ('and' areas+=Area)*;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//Door:
	//	'Door' name=VARNAME 'from' from=Coordinate 'to' to=Coordinate;
	public DoorElements getDoorAccess() {
		return pDoor;
	}
	
	public ParserRule getDoorRule() {
		return getDoorAccess().getRule();
	}
	
	//Person:
	//	'Person' name=VARNAME 'in' location=Coordinate ':' action=[ActionDesc|VARNAME];
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Exit:
	//	'Exit' 'in' location=Coordinate;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}
	
	//Fire:
	//	'Fire' 'in' location=Coordinate;
	public FireElements getFireAccess() {
		return pFire;
	}
	
	public ParserRule getFireRule() {
		return getFireAccess().getRule();
	}
	
	//EmergencySign:
	//	'EmergencySign' 'from' from=[Door|VARNAME] ref=DoorRef;
	public EmergencySignElements getEmergencySignAccess() {
		return pEmergencySign;
	}
	
	public ParserRule getEmergencySignRule() {
		return getEmergencySignAccess().getRule();
	}
	
	//DoorRef:
	//	'to' to=[Door|VARNAME];
	public DoorRefElements getDoorRefAccess() {
		return pDoorRef;
	}
	
	public ParserRule getDoorRefRule() {
		return getDoorRefAccess().getRule();
	}
	
	//Coordinate:
	//	'(' x=INT ',' y=INT ')';
	public CoordinateElements getCoordinateAccess() {
		return pCoordinate;
	}
	
	public ParserRule getCoordinateRule() {
		return getCoordinateAccess().getRule();
	}
	
	//Area:
	//	'from' from=Coordinate 'to' to=Coordinate ('without' without+=Coordinate (',' without+=Coordinate)*)?;
	public AreaElements getAreaAccess() {
		return pArea;
	}
	
	public ParserRule getAreaRule() {
		return getAreaAccess().getRule();
	}
	
	//terminal VARNAME:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getVARNAMERule() {
		return tVARNAME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
