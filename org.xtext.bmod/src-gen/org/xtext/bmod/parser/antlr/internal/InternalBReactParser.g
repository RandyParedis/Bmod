/*
 * generated by Xtext 2.16.0
 */
parser grammar InternalBReactParser;

options {
	tokenVocab=InternalBReactLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.xtext.bmod.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.bmod.services.BReactGrammarAccess;

}

@members {

 	private BReactGrammarAccess grammarAccess;

    public InternalBReactParser(TokenStream input, BReactGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "React";
   	}

   	@Override
   	protected BReactGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleReact
entryRuleReact returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReactRule()); }
	iv_ruleReact=ruleReact
	{ $current=$iv_ruleReact.current; }
	EOF;

// Rule React
ruleReact returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReactAccess().getReactAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReactAccess().getActionsActionDescParserRuleCall_1_0());
				}
				lv_actions_1_0=ruleActionDesc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReactRule());
					}
					add(
						$current,
						"actions",
						lv_actions_1_0,
						"org.xtext.bmod.BReact.ActionDesc");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleActionDesc
entryRuleActionDesc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionDescRule()); }
	iv_ruleActionDesc=ruleActionDesc
	{ $current=$iv_ruleActionDesc.current; }
	EOF;

// Rule ActionDesc
ruleActionDesc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_shared_0_0=Shared
				{
					newLeafNode(lv_shared_0_0, grammarAccess.getActionDescAccess().getSharedSharedKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionDescRule());
					}
					setWithLastConsumed($current, "shared", true, "shared");
				}
			)
		)?
		otherlv_1=Action
		{
			newLeafNode(otherlv_1, grammarAccess.getActionDescAccess().getActionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_VARNAME
				{
					newLeafNode(lv_name_2_0, grammarAccess.getActionDescAccess().getNameVARNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionDescRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtext.bmod.BReact.VARNAME");
				}
			)
		)
		otherlv_3=Colon
		{
			newLeafNode(otherlv_3, grammarAccess.getActionDescAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionDescAccess().getFindsFindParserRuleCall_4_0());
				}
				lv_finds_4_0=ruleFind
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionDescRule());
					}
					add(
						$current,
						"finds",
						lv_finds_4_0,
						"org.xtext.bmod.BReact.Find");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleFind
entryRuleFind returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindRule()); }
	iv_ruleFind=ruleFind
	{ $current=$iv_ruleFind.current; }
	EOF;

// Rule Find
ruleFind returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_global_0_0=Global
				{
					newLeafNode(lv_global_0_0, grammarAccess.getFindAccess().getGlobalGlobalKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFindRule());
					}
					setWithLastConsumed($current, "global", true, "global");
				}
			)
		)?
		otherlv_1=Find
		{
			newLeafNode(otherlv_1, grammarAccess.getFindAccess().getFindKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFindAccess().getDistanceDistanceEnumRuleCall_2_0());
				}
				lv_distance_2_0=ruleDistance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindRule());
					}
					set(
						$current,
						"distance",
						lv_distance_2_0,
						"org.xtext.bmod.BReact.Distance");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_from_3_0=From
				{
					newLeafNode(lv_from_3_0, grammarAccess.getFindAccess().getFromFromKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFindRule());
					}
					setWithLastConsumed($current, "from", true, "from");
				}
			)
		)?
		(
			(
				(
					lv_burning_4_0=Burning
					{
						newLeafNode(lv_burning_4_0, grammarAccess.getFindAccess().getBurningBurningKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFindRule());
						}
						setWithLastConsumed($current, "burning", true, "burning");
					}
				)
			)
			    |
			(
				(
					lv_normal_5_0=Normal
					{
						newLeafNode(lv_normal_5_0, grammarAccess.getFindAccess().getNormalNormalKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFindRule());
						}
						setWithLastConsumed($current, "normal", true, "normal");
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFindAccess().getLocatableLocatableEnumRuleCall_5_0());
				}
				lv_locatable_6_0=ruleLocatable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindRule());
					}
					set(
						$current,
						"locatable",
						lv_locatable_6_0,
						"org.xtext.bmod.BReact.Locatable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=Semicolon
		{
			newLeafNode(otherlv_7, grammarAccess.getFindAccess().getSemicolonKeyword_6());
		}
	)
;

// Rule Distance
ruleDistance returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Nearest
			{
				$current = grammarAccess.getDistanceAccess().getNearestEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDistanceAccess().getNearestEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Farthest
			{
				$current = grammarAccess.getDistanceAccess().getFarthestEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDistanceAccess().getFarthestEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=First
			{
				$current = grammarAccess.getDistanceAccess().getFirstEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDistanceAccess().getFirstEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=Last
			{
				$current = grammarAccess.getDistanceAccess().getLastEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDistanceAccess().getLastEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Locatable
ruleLocatable returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Cell
			{
				$current = grammarAccess.getLocatableAccess().getCellEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLocatableAccess().getCellEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Door
			{
				$current = grammarAccess.getLocatableAccess().getDoorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLocatableAccess().getDoorEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=Exit
			{
				$current = grammarAccess.getLocatableAccess().getExitEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getLocatableAccess().getExitEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=Fire
			{
				$current = grammarAccess.getLocatableAccess().getFireEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getLocatableAccess().getFireEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4=Person
			{
				$current = grammarAccess.getLocatableAccess().getPersonEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getLocatableAccess().getPersonEnumLiteralDeclaration_4());
			}
		)
	)
;
