/*
 * generated by Xtext 2.16.0
 */
grammar InternalBmod;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.bmod.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.bmod.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.bmod.services.BmodGrammarAccess;

}

@parser::members {

 	private BmodGrammarAccess grammarAccess;

    public InternalBmodParser(TokenStream input, BmodGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected BmodGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getModelAccess().getFloorplanParserRuleCall());
	}
	this_Floorplan_0=ruleFloorplan
	{
		$current = $this_Floorplan_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFloorplan
entryRuleFloorplan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloorplanRule()); }
	iv_ruleFloorplan=ruleFloorplan
	{ $current=$iv_ruleFloorplan.current; }
	EOF;

// Rule Floorplan
ruleFloorplan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFloorplanAccess().getFloorplanAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFloorplanAccess().getRoomsRoomParserRuleCall_1_0_0());
					}
					lv_rooms_1_0=ruleRoom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFloorplanRule());
						}
						add(
							$current,
							"rooms",
							lv_rooms_1_0,
							"org.xtext.bmod.Bmod.Room");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFloorplanAccess().getDoorsDoorParserRuleCall_1_1_0());
					}
					lv_doors_2_0=ruleDoor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFloorplanRule());
						}
						add(
							$current,
							"doors",
							lv_doors_2_0,
							"org.xtext.bmod.Bmod.Door");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFloorplanAccess().getPersonsPersonParserRuleCall_1_2_0());
					}
					lv_persons_3_0=rulePerson
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFloorplanRule());
						}
						add(
							$current,
							"persons",
							lv_persons_3_0,
							"org.xtext.bmod.Bmod.Person");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFloorplanAccess().getProfilesProfileParserRuleCall_1_3_0());
					}
					lv_profiles_4_0=ruleProfile
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFloorplanRule());
						}
						add(
							$current,
							"profiles",
							lv_profiles_4_0,
							"org.xtext.bmod.Bmod.Profile");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFloorplanAccess().getLevelsLevelParserRuleCall_1_4_0());
					}
					lv_levels_5_0=ruleLevel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFloorplanRule());
						}
						add(
							$current,
							"levels",
							lv_levels_5_0,
							"org.xtext.bmod.Bmod.Level");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRoom
entryRuleRoom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoomRule()); }
	iv_ruleRoom=ruleRoom
	{ $current=$iv_ruleRoom.current; }
	EOF;

// Rule Room
ruleRoom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Room'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoomAccess().getRoomKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_VARNAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoomAccess().getNameVARNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoomRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.bmod.Bmod.VARNAME");
				}
			)
		)
		otherlv_2='named'
		{
			newLeafNode(otherlv_2, grammarAccess.getRoomAccess().getNamedKeyword_2());
		}
		(
			(
				lv_named_3_0=RULE_STRING
				{
					newLeafNode(lv_named_3_0, grammarAccess.getRoomAccess().getNamedSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoomRule());
					}
					setWithLastConsumed(
						$current,
						"named",
						lv_named_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRoomAccess().getAreaAreaParserRuleCall_4_0());
				}
				lv_area_4_0=ruleArea
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoomRule());
					}
					set(
						$current,
						"area",
						lv_area_4_0,
						"org.xtext.bmod.Bmod.Area");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDoor
entryRuleDoor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoorRule()); }
	iv_ruleDoor=ruleDoor
	{ $current=$iv_ruleDoor.current; }
	EOF;

// Rule Door
ruleDoor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Door'
		{
			newLeafNode(otherlv_0, grammarAccess.getDoorAccess().getDoorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_VARNAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDoorAccess().getNameVARNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDoorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.bmod.Bmod.VARNAME");
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getDoorAccess().getFromKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoorAccess().getFromCoordinateParserRuleCall_3_0());
				}
				lv_from_3_0=ruleCoordinate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoorRule());
					}
					set(
						$current,
						"from",
						lv_from_3_0,
						"org.xtext.bmod.Bmod.Coordinate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getDoorAccess().getToKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoorAccess().getToCoordinateParserRuleCall_5_0());
				}
				lv_to_5_0=ruleCoordinate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoorRule());
					}
					set(
						$current,
						"to",
						lv_to_5_0,
						"org.xtext.bmod.Bmod.Coordinate");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProfile
entryRuleProfile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProfileRule()); }
	iv_ruleProfile=ruleProfile
	{ $current=$iv_ruleProfile.current; }
	EOF;

// Rule Profile
ruleProfile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Profile'
		{
			newLeafNode(otherlv_0, grammarAccess.getProfileAccess().getProfileKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_VARNAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProfileAccess().getNameVARNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProfileRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.bmod.Bmod.VARNAME");
				}
			)
		)
	)
;

// Entry rule entryRuleLevel
entryRuleLevel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLevelRule()); }
	iv_ruleLevel=ruleLevel
	{ $current=$iv_ruleLevel.current; }
	EOF;

// Rule Level
ruleLevel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Level'
		{
			newLeafNode(otherlv_0, grammarAccess.getLevelAccess().getLevelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_VARNAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLevelAccess().getNameVARNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLevelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.bmod.Bmod.VARNAME");
				}
			)
		)
	)
;

// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	iv_rulePerson=rulePerson
	{ $current=$iv_rulePerson.current; }
	EOF;

// Rule Person
rulePerson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Person'
		{
			newLeafNode(otherlv_0, grammarAccess.getPersonAccess().getPersonKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_VARNAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPersonAccess().getNameVARNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPersonRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.bmod.Bmod.VARNAME");
				}
			)
		)
		otherlv_2='named'
		{
			newLeafNode(otherlv_2, grammarAccess.getPersonAccess().getNamedKeyword_2());
		}
		(
			(
				lv_named_3_0=RULE_STRING
				{
					newLeafNode(lv_named_3_0, grammarAccess.getPersonAccess().getNamedSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPersonRule());
					}
					setWithLastConsumed(
						$current,
						"named",
						lv_named_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='in'
		{
			newLeafNode(otherlv_4, grammarAccess.getPersonAccess().getInKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPersonAccess().getLocationCoordinateParserRuleCall_5_0());
				}
				lv_location_5_0=ruleCoordinate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPersonRule());
					}
					set(
						$current,
						"location",
						lv_location_5_0,
						"org.xtext.bmod.Bmod.Coordinate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_6='Profile'
				{
					newLeafNode(otherlv_6, grammarAccess.getPersonAccess().getProfileKeyword_6_0_0());
				}
				otherlv_7=':'
				{
					newLeafNode(otherlv_7, grammarAccess.getPersonAccess().getColonKeyword_6_0_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPersonRule());
							}
						}
						otherlv_8=RULE_VARNAME
						{
							newLeafNode(otherlv_8, grammarAccess.getPersonAccess().getProfileProfileCrossReference_6_0_2_0());
						}
					)
				)
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getPersonAccess().getCommaKeyword_6_0_3());
				}
				otherlv_10='Level'
				{
					newLeafNode(otherlv_10, grammarAccess.getPersonAccess().getLevelKeyword_6_0_4());
				}
				otherlv_11=':'
				{
					newLeafNode(otherlv_11, grammarAccess.getPersonAccess().getColonKeyword_6_0_5());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPersonRule());
							}
						}
						otherlv_12=RULE_VARNAME
						{
							newLeafNode(otherlv_12, grammarAccess.getPersonAccess().getLevelLevelCrossReference_6_0_6_0());
						}
					)
				)
			)
			    |
			(
				otherlv_13='Level'
				{
					newLeafNode(otherlv_13, grammarAccess.getPersonAccess().getLevelKeyword_6_1_0());
				}
				otherlv_14=':'
				{
					newLeafNode(otherlv_14, grammarAccess.getPersonAccess().getColonKeyword_6_1_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPersonRule());
							}
						}
						otherlv_15=RULE_VARNAME
						{
							newLeafNode(otherlv_15, grammarAccess.getPersonAccess().getProfileLevelCrossReference_6_1_2_0());
						}
					)
				)
				otherlv_16=','
				{
					newLeafNode(otherlv_16, grammarAccess.getPersonAccess().getCommaKeyword_6_1_3());
				}
				otherlv_17='Profile'
				{
					newLeafNode(otherlv_17, grammarAccess.getPersonAccess().getProfileKeyword_6_1_4());
				}
				otherlv_18=':'
				{
					newLeafNode(otherlv_18, grammarAccess.getPersonAccess().getColonKeyword_6_1_5());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPersonRule());
							}
						}
						otherlv_19=RULE_VARNAME
						{
							newLeafNode(otherlv_19, grammarAccess.getPersonAccess().getLevelProfileCrossReference_6_1_6_0());
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleCoordinate
entryRuleCoordinate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoordinateRule()); }
	iv_ruleCoordinate=ruleCoordinate
	{ $current=$iv_ruleCoordinate.current; }
	EOF;

// Rule Coordinate
ruleCoordinate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getCoordinateAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_x_1_0=RULE_INT
				{
					newLeafNode(lv_x_1_0, grammarAccess.getCoordinateAccess().getXINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCoordinateRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getCoordinateAccess().getCommaKeyword_2());
		}
		(
			(
				lv_y_3_0=RULE_INT
				{
					newLeafNode(lv_y_3_0, grammarAccess.getCoordinateAccess().getYINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCoordinateRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getCoordinateAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleArea
entryRuleArea returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAreaRule()); }
	iv_ruleArea=ruleArea
	{ $current=$iv_ruleArea.current; }
	EOF;

// Rule Area
ruleArea returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='from'
		{
			newLeafNode(otherlv_0, grammarAccess.getAreaAccess().getFromKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAreaAccess().getFromCoordinateParserRuleCall_1_0());
				}
				lv_from_1_0=ruleCoordinate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAreaRule());
					}
					set(
						$current,
						"from",
						lv_from_1_0,
						"org.xtext.bmod.Bmod.Coordinate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getAreaAccess().getToKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAreaAccess().getToCoordinateParserRuleCall_3_0());
				}
				lv_to_3_0=ruleCoordinate
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAreaRule());
					}
					set(
						$current,
						"to",
						lv_to_3_0,
						"org.xtext.bmod.Bmod.Coordinate");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='without'
			{
				newLeafNode(otherlv_4, grammarAccess.getAreaAccess().getWithoutKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAreaAccess().getWithoutCoordinateParserRuleCall_4_1_0());
					}
					lv_without_5_0=ruleCoordinate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAreaRule());
						}
						add(
							$current,
							"without",
							lv_without_5_0,
							"org.xtext.bmod.Bmod.Coordinate");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getAreaAccess().getCommaKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAreaAccess().getWithoutCoordinateParserRuleCall_4_2_1_0());
						}
						lv_without_7_0=ruleCoordinate
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAreaRule());
							}
							add(
								$current,
								"without",
								lv_without_7_0,
								"org.xtext.bmod.Bmod.Coordinate");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

RULE_VARNAME : ('A'..'Z'|'a'..'z'|'_') ('A'..'Z'|'a'..'z'|'0'..'9'|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
