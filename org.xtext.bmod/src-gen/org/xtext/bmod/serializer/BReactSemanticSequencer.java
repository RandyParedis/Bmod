/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.bmod.breact.ActionDesc;
import org.xtext.bmod.breact.BreactPackage;
import org.xtext.bmod.breact.Find;
import org.xtext.bmod.breact.React;
import org.xtext.bmod.services.BReactGrammarAccess;

@SuppressWarnings("all")
public class BReactSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BReactGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BreactPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BreactPackage.ACTION_DESC:
				sequence_ActionDesc(context, (ActionDesc) semanticObject); 
				return; 
			case BreactPackage.FIND:
				sequence_Find(context, (Find) semanticObject); 
				return; 
			case BreactPackage.REACT:
				sequence_React(context, (React) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActionDesc returns ActionDesc
	 *
	 * Constraint:
	 *     (shared?='shared'? name=VARNAME finds+=Find+)
	 */
	protected void sequence_ActionDesc(ISerializationContext context, ActionDesc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Find returns Find
	 *
	 * Constraint:
	 *     (global?='global'? distance=Distance from?='from'? (burning?='burning' | normal?='normal')? locatable=Locatable)
	 */
	protected void sequence_Find(ISerializationContext context, Find semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     React returns React
	 *
	 * Constraint:
	 *     actions+=ActionDesc*
	 */
	protected void sequence_React(ISerializationContext context, React semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
