/**
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.bmod.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.bmod.bmod.BmodPackage;
import org.xtext.bmod.bmod.Door;
import org.xtext.bmod.bmod.EmergencySign;
import org.xtext.bmod.bmod.Exit;
import org.xtext.bmod.bmod.Fire;
import org.xtext.bmod.bmod.Floorplan;
import org.xtext.bmod.bmod.Import;
import org.xtext.bmod.bmod.Person;
import org.xtext.bmod.bmod.Room;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Floorplan</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.bmod.bmod.impl.FloorplanImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link org.xtext.bmod.bmod.impl.FloorplanImpl#getRooms <em>Rooms</em>}</li>
 *   <li>{@link org.xtext.bmod.bmod.impl.FloorplanImpl#getDoors <em>Doors</em>}</li>
 *   <li>{@link org.xtext.bmod.bmod.impl.FloorplanImpl#getPersons <em>Persons</em>}</li>
 *   <li>{@link org.xtext.bmod.bmod.impl.FloorplanImpl#getExits <em>Exits</em>}</li>
 *   <li>{@link org.xtext.bmod.bmod.impl.FloorplanImpl#getFires <em>Fires</em>}</li>
 *   <li>{@link org.xtext.bmod.bmod.impl.FloorplanImpl#getSigns <em>Signs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FloorplanImpl extends ModelImpl implements Floorplan
{
  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<Import> imports;

  /**
   * The cached value of the '{@link #getRooms() <em>Rooms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRooms()
   * @generated
   * @ordered
   */
  protected EList<Room> rooms;

  /**
   * The cached value of the '{@link #getDoors() <em>Doors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDoors()
   * @generated
   * @ordered
   */
  protected EList<Door> doors;

  /**
   * The cached value of the '{@link #getPersons() <em>Persons</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPersons()
   * @generated
   * @ordered
   */
  protected EList<Person> persons;

  /**
   * The cached value of the '{@link #getExits() <em>Exits</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExits()
   * @generated
   * @ordered
   */
  protected EList<Exit> exits;

  /**
   * The cached value of the '{@link #getFires() <em>Fires</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFires()
   * @generated
   * @ordered
   */
  protected EList<Fire> fires;

  /**
   * The cached value of the '{@link #getSigns() <em>Signs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSigns()
   * @generated
   * @ordered
   */
  protected EList<EmergencySign> signs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FloorplanImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BmodPackage.Literals.FLOORPLAN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Import> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<Import>(Import.class, this, BmodPackage.FLOORPLAN__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Room> getRooms()
  {
    if (rooms == null)
    {
      rooms = new EObjectContainmentEList<Room>(Room.class, this, BmodPackage.FLOORPLAN__ROOMS);
    }
    return rooms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Door> getDoors()
  {
    if (doors == null)
    {
      doors = new EObjectContainmentEList<Door>(Door.class, this, BmodPackage.FLOORPLAN__DOORS);
    }
    return doors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Person> getPersons()
  {
    if (persons == null)
    {
      persons = new EObjectContainmentEList<Person>(Person.class, this, BmodPackage.FLOORPLAN__PERSONS);
    }
    return persons;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Exit> getExits()
  {
    if (exits == null)
    {
      exits = new EObjectContainmentEList<Exit>(Exit.class, this, BmodPackage.FLOORPLAN__EXITS);
    }
    return exits;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Fire> getFires()
  {
    if (fires == null)
    {
      fires = new EObjectContainmentEList<Fire>(Fire.class, this, BmodPackage.FLOORPLAN__FIRES);
    }
    return fires;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EmergencySign> getSigns()
  {
    if (signs == null)
    {
      signs = new EObjectContainmentEList<EmergencySign>(EmergencySign.class, this, BmodPackage.FLOORPLAN__SIGNS);
    }
    return signs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BmodPackage.FLOORPLAN__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case BmodPackage.FLOORPLAN__ROOMS:
        return ((InternalEList<?>)getRooms()).basicRemove(otherEnd, msgs);
      case BmodPackage.FLOORPLAN__DOORS:
        return ((InternalEList<?>)getDoors()).basicRemove(otherEnd, msgs);
      case BmodPackage.FLOORPLAN__PERSONS:
        return ((InternalEList<?>)getPersons()).basicRemove(otherEnd, msgs);
      case BmodPackage.FLOORPLAN__EXITS:
        return ((InternalEList<?>)getExits()).basicRemove(otherEnd, msgs);
      case BmodPackage.FLOORPLAN__FIRES:
        return ((InternalEList<?>)getFires()).basicRemove(otherEnd, msgs);
      case BmodPackage.FLOORPLAN__SIGNS:
        return ((InternalEList<?>)getSigns()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BmodPackage.FLOORPLAN__IMPORTS:
        return getImports();
      case BmodPackage.FLOORPLAN__ROOMS:
        return getRooms();
      case BmodPackage.FLOORPLAN__DOORS:
        return getDoors();
      case BmodPackage.FLOORPLAN__PERSONS:
        return getPersons();
      case BmodPackage.FLOORPLAN__EXITS:
        return getExits();
      case BmodPackage.FLOORPLAN__FIRES:
        return getFires();
      case BmodPackage.FLOORPLAN__SIGNS:
        return getSigns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BmodPackage.FLOORPLAN__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends Import>)newValue);
        return;
      case BmodPackage.FLOORPLAN__ROOMS:
        getRooms().clear();
        getRooms().addAll((Collection<? extends Room>)newValue);
        return;
      case BmodPackage.FLOORPLAN__DOORS:
        getDoors().clear();
        getDoors().addAll((Collection<? extends Door>)newValue);
        return;
      case BmodPackage.FLOORPLAN__PERSONS:
        getPersons().clear();
        getPersons().addAll((Collection<? extends Person>)newValue);
        return;
      case BmodPackage.FLOORPLAN__EXITS:
        getExits().clear();
        getExits().addAll((Collection<? extends Exit>)newValue);
        return;
      case BmodPackage.FLOORPLAN__FIRES:
        getFires().clear();
        getFires().addAll((Collection<? extends Fire>)newValue);
        return;
      case BmodPackage.FLOORPLAN__SIGNS:
        getSigns().clear();
        getSigns().addAll((Collection<? extends EmergencySign>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BmodPackage.FLOORPLAN__IMPORTS:
        getImports().clear();
        return;
      case BmodPackage.FLOORPLAN__ROOMS:
        getRooms().clear();
        return;
      case BmodPackage.FLOORPLAN__DOORS:
        getDoors().clear();
        return;
      case BmodPackage.FLOORPLAN__PERSONS:
        getPersons().clear();
        return;
      case BmodPackage.FLOORPLAN__EXITS:
        getExits().clear();
        return;
      case BmodPackage.FLOORPLAN__FIRES:
        getFires().clear();
        return;
      case BmodPackage.FLOORPLAN__SIGNS:
        getSigns().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BmodPackage.FLOORPLAN__IMPORTS:
        return imports != null && !imports.isEmpty();
      case BmodPackage.FLOORPLAN__ROOMS:
        return rooms != null && !rooms.isEmpty();
      case BmodPackage.FLOORPLAN__DOORS:
        return doors != null && !doors.isEmpty();
      case BmodPackage.FLOORPLAN__PERSONS:
        return persons != null && !persons.isEmpty();
      case BmodPackage.FLOORPLAN__EXITS:
        return exits != null && !exits.isEmpty();
      case BmodPackage.FLOORPLAN__FIRES:
        return fires != null && !fires.isEmpty();
      case BmodPackage.FLOORPLAN__SIGNS:
        return signs != null && !signs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FloorplanImpl
