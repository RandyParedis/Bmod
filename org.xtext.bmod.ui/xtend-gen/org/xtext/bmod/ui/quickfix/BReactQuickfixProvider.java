/**
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.ui.quickfix;

import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.xtext.bmod.validation.BReactValidator;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class BReactQuickfixProvider extends DefaultQuickfixProvider {
  @Fix(BReactValidator.BURNING_CELL)
  public void burningCellToFire(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument doc = context.getXtextDocument();
      final String txt = "burning Cell";
      doc.replace((issue.getOffset()).intValue(), txt.length(), "Fire");
    };
    acceptor.accept(issue, "Change to \"Fire\"", "Change to \"Fire\".", "upcase.png", _function);
  }
  
  @Fix(BReactValidator.BURNING_FIRE)
  public void burningFire(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument doc = context.getXtextDocument();
      final String txt = "burning ";
      doc.replace((issue.getOffset()).intValue(), txt.length(), "");
    };
    acceptor.accept(issue, "Remove keyword", "Remove keyword.", "upcase.png", _function);
  }
  
  @Fix(BReactValidator.NORMAL_FIRE)
  public void normalFire(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument doc = context.getXtextDocument();
      final String txt = "normal ";
      doc.replace((issue.getOffset()).intValue(), txt.length(), "");
    };
    acceptor.accept(issue, "Remove keyword", "Remove keyword.", "upcase.png", _function);
  }
  
  @Fix(BReactValidator.EXCESSIVE_FROM)
  public void excessiveFrom(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = (IModificationContext context) -> {
      final IXtextDocument doc = context.getXtextDocument();
      final String txt = "from ";
      doc.replace((issue.getOffset()).intValue(), txt.length(), "");
    };
    acceptor.accept(issue, "Remove keyword", "Remove keyword.", "upcase.png", _function);
  }
}
