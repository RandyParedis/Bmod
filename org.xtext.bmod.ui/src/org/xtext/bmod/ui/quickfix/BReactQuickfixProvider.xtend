/*
 * generated by Xtext 2.16.0
 */
package org.xtext.bmod.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.xtext.bmod.validation.BReactValidator

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class BReactQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(BReactValidator.INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}

	@Fix(BReactValidator.BURNING_CELL)
	def burningCellToFire(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Change to "Fire"', 'Change to "Fire".', 'upcase.png') [
			context |
			val doc = context.xtextDocument;
			val txt = "burning Cell";
			doc.replace(issue.offset, txt.length, "Fire");
		]
	}
	
	@Fix(BReactValidator.BURNING_FIRE)
	def burningFire(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Remove keyword', 'Remove keyword.', 'upcase.png') [
			context |
			val doc = context.xtextDocument;
			val txt = "burning ";
			doc.replace(issue.offset, txt.length, "");
		]
	}
	
	@Fix(BReactValidator.NORMAL_FIRE)
	def normalFire(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Remove keyword', 'Remove keyword.', 'upcase.png') [
			context |
			val doc = context.xtextDocument;
			val txt = "normal ";
			doc.replace(issue.offset, txt.length, "");
		]
	}
	
	@Fix(BReactValidator.EXCESSIVE_FROM)
	def excessiveFrom(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Remove keyword', 'Remove keyword.', 'upcase.png') [
			context |
			val doc = context.xtextDocument;
			val txt = "from ";
			doc.replace(issue.offset, txt.length, "");
		]
	}
}
